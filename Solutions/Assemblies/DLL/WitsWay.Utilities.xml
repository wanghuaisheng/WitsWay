<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WitsWay.Utilities</name>
    </assembly>
    <members>
        <member name="T:WitsWay.Utilities.Builders.PageParameterBuilder">
            <summary>
            分页参数构建器
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Builders.PageParameterBuilder.NewBuilder">
            <summary>
            取得Builder实例
            </summary>
            <returns>新的Builder实例</returns>
        </member>
        <member name="P:WitsWay.Utilities.Builders.PageParameterBuilder.Result">
            <summary>
            构建结果
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Builders.PageParameterBuilder.PageIndex(System.Int32)">
            <summary>
            第几页
            </summary>
            <returns>分页参数构建器</returns>
        </member>
        <member name="M:WitsWay.Utilities.Builders.PageParameterBuilder.PageSize(System.Int32)">
            <summary>
            每页条数
            </summary>
            <returns>分页参数构建器</returns>
        </member>
        <member name="M:WitsWay.Utilities.Builders.PageParameterBuilder.SortColumn(System.String,System.Boolean)">
            <summary>
            排序列
            </summary>
            <param name="field">字段</param>
            <param name="assend">是否升序</param>
            <returns>分页参数构建器</returns>
        </member>
        <member name="T:WitsWay.Utilities.CheckSum.CrcFactory">
            <summary>
            CRC32校验
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.CheckSum.CrcFactory.Value">
            <summary>
            校验值
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.CrcFactory.Reset">
            <summary>
            重置校验值
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.CrcFactory.Update(System.Int32)">
            <summary>
            更新校验值
            </summary>
            <param name = "value">
            会取value的低8位
            </param>
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.CrcFactory.Update(System.Byte[])">
            <summary>
            更新对应字节数组的CRC32校验值
            </summary>
            <param name="buffer">
            需要校验的字节数组
            </param>
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.CrcFactory.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            添加计算字节数组
            </summary>
            <param name = "buffer">
            计算CRC值的字节数组
            </param>
            <param name = "offset">
            左偏移量
            </param>
            <param name = "count">
            字节数组中 用于计算的位数
            </param>
        </member>
        <member name="T:WitsWay.Utilities.CheckSum.Adler32">
            <summary>
            Adler-32校验算法，速度优于CRC32校验
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.CheckSum.Adler32.BaseValue">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.CheckSum.Adler32.Value">
            <summary>
            校验值
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.Adler32.#ctor">
             <summary>
            创建Adler32校验实例
             </summary>
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.Adler32.Reset">
            <summary>
            重置校验值
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.Adler32.Update(System.Int32)">
            <summary>
            添加校验值
            </summary>
            <param name = "value">
            要添加的校验值，高位忽略
            </param>
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.Adler32.Update(System.Byte[])">
            <summary>
            添加校验值
            </summary>
            <param name="buffer"></param>
            要添加的校验值，高位忽略
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            更新CRC校验值
            </summary>
            <param name = "buffer">
            字节数组
            </param>
            <param name = "offset">
            左偏移量
            </param>
            <param name = "count">
            用于计算的字节长度
            </param>
        </member>
        <member name="T:WitsWay.Utilities.CheckSum.Crc32">
            <summary>
            CRC32校验
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.CheckSum.Crc32.Value">
            <summary>
            校验值
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.Crc32.Reset">
            <summary>
            重置校验值
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.Crc32.Update(System.Int32)">
            <summary>
            更新校验值
            </summary>
            <param name = "value">
            会取value的低8位
            </param>
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.Crc32.Update(System.Byte[])">
            <summary>
            更新对应字节数组的CRC32校验值
            </summary>
            <param name="buffer">
            需要校验的字节数组
            </param>
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            添加计算字节数组
            </summary>
            <param name = "buffer">
            计算CRC值的字节数组
            </param>
            <param name = "offset">
            左偏移量
            </param>
            <param name = "count">
            字节数组中 用于计算的位数
            </param>
        </member>
        <member name="T:WitsWay.Utilities.CheckSum.ICheckSum">
            <summary>
            校验接口
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.CheckSum.ICheckSum.Value">
            <summary>
            校验值
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.ICheckSum.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.ICheckSum.Update(System.Int32)">
            <summary>
            添加校验值
            </summary>
            <param name = "value">
            要添加的校验值，高位忽略
            </param>
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.ICheckSum.Update(System.Byte[])">
            <summary>
            更新校验值
            </summary>
            <param name="buffer">
            字节数组
            </param>
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.ICheckSum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            添加校验字节数组
            </summary>
            <param name = "buffer">
            字节数组
            </param>
            <param name = "offset">
            左偏移量
            </param>
            <param name = "count">
            用于计算的字节长度
            </param>
        </member>
        <member name="T:WitsWay.Utilities.CheckSum.StrangeCrc">
            <summary>
            Bzip2校验算法
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.StrangeCrc.#ctor">
            <summary>
            初始化 <see cref="T:WitsWay.Utilities.CheckSum.StrangeCrc"></see>实例
            </summary>	
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.StrangeCrc.Reset">
            <summary>
            重置Crc校验值
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.CheckSum.StrangeCrc.Value">
            <summary>
            获取CRC校验值
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.StrangeCrc.Update(System.Int32)">
            <summary>
            添加校验值
            </summary>
            <param name = "value">
            要添加的校验值，高位忽略
            </param>
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.StrangeCrc.Update(System.Byte[])">
            <summary>
            更新校验值
            </summary>
            <param name="buffer">
            字节数组
            </param>
        </member>
        <member name="M:WitsWay.Utilities.CheckSum.StrangeCrc.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            更新CRC校验值
            </summary>
            <param name = "buffer">
            字节数组
            </param>
            <param name = "offset">
            左偏移量
            </param>
            <param name = "count">
            用于计算的字节长度
            </param>
        </member>
        <member name="T:WitsWay.Utilities.Containers.BasicTypeContainer">
            <summary>
            基础类型容器
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Containers.BasicTypeContainer.FullNameTypeDic">
            <summary>
            类型全名→类型
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Containers.BasicTypeContainer.DllConfigKey">
            <summary>
            AppConfig中数据访问Dll名称配置
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Containers.BasicTypeContainer.ExcludeDlls">
            <summary>
            排除查找的DLL
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Containers.BasicTypeContainer.Locker">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Containers.BasicTypeContainer.GetTypeByName(System.String)">
            <summary>
            获取类型
            </summary>
            <param name="fullName">类型全名</param>
            <returns>类型</returns>
        </member>
        <member name="T:WitsWay.Utilities.Daos.BulkOperations`1">
            <summary>
            数据批量操作
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.BulkOperations`1.BulkInsert(System.String,System.Collections.Generic.IList{`0},System.String,System.String,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            批量插入(主键重复会报错)
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.BulkOperations`1.BulkUpdate(System.String,System.Collections.Generic.IList{`0},System.String,System.String,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            批量更新
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.BulkOperations`1.BulkSync(System.String,System.Collections.Generic.IList{`0},System.String,System.String,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            批量同步（插入或更新或删除）
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.BulkOperations`1.MergeUpdateOrInsert(System.Data.SqlClient.SqlCommand,System.String,System.String,System.String,System.String)">
            <summary>
            批量更新更新或插入
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.BulkOperations`1.MergeUpdate(System.Data.SqlClient.SqlCommand,System.String,System.String,System.String,System.String)">
            <summary>
            批量更新
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.BulkOperations`1.CreateUpdateSql(System.Data.SqlClient.SqlCommand,System.String,System.String)">
            <summary>
            创建更新的sql
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.BulkOperations`1.CreateInsertSql(System.Data.SqlClient.SqlCommand,System.String,System.String)">
            <summary>
            创建插入sql
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.BulkOperations`1.EntitiesToTable(System.Data.SqlClient.SqlCommand,System.Collections.Generic.IList{`0},System.String,System.String)">
            <summary>
            把数据集合转成table
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.BulkOperations`1.BulkToServer(System.Data.SqlClient.SqlCommand,System.Data.DataTable,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            把数据批量写到数据库
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.BulkOperations`1.CreateTempTable(System.Data.SqlClient.SqlCommand,System.String,System.String,System.String)">
            <summary>
            创建临时表
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.BulkOperations`1.DropTempTable(System.Data.SqlClient.SqlCommand,System.String)">
            <summary>
            删除临时表
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.BulkOperations`1.CreateTable(System.Data.SqlClient.SqlCommand,System.String,System.String)">
            <summary>
            创建表结构
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.BulkOperations`1.GetTableColumnInfo(System.Data.SqlClient.SqlCommand,System.String,System.String)">
            <summary>
            目标表的列信息
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.BulkOperations`1.ResultToEntity(System.Data.DataTable)">
            <summary>
            把结果集转化为实体集
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Daos.DaoFactory">
            <summary>
            数据访问对象工厂
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Daos.DaoFactory.DaoTypeDic">
            <summary>
            IDao->Dao
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Daos.DaoFactory.Locker">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.DaoFactory.GetDao``1">
            <summary>
            取得数据访问对象
            </summary>
            <typeparam name="T">数据访问对象接口类型</typeparam>
            <returns>接口实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.Daos.DaoFactory.GetDao``1(System.String)">
            <summary>
            取得数据访问对象
            </summary>
            <typeparam name="T">数据访问对象接口类型</typeparam>
            <param name="dll">数据访问层实例DLL名称</param>
            <returns>接口实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.Daos.DaoFactory.InitDlls(System.String)">
            <summary>
            数据访问对象工厂
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.DaoFactory.InitDll(System.String,System.Collections.Generic.IDictionary{System.Type,System.Type})">
            <summary>
            数据访问对象工厂
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Daos.CdcOperations">
            <summary>
            CDCOperations
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.CdcOperations.#ctor(System.String)">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.CdcOperations.EnableDb">
            <summary>
            对数据库开启CDC
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.CdcOperations.DisableDb">
            <summary>
            关闭数据库CDC
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.CdcOperations.IsEnableDb(System.String)">
            <summary>
            检查数据库是否已经开启CDC
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.CdcOperations.EnableTable(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            对表开启CDC
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.CdcOperations.DisableTable(System.String,System.String)">
            <summary>
            关闭表的CDC
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.CdcOperations.IsEnableTable(System.String,System.String)">
            <summary>
            检查表是否开启CDC
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.CdcOperations.GetDbName">
            <summary>
            取数据库信息
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.CdcOperations.GetTables">
            <summary>
            取数据库里面所有的表
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.CdcOperations.GetColumnsByTable(System.String,System.String)">
            <summary>
            取表的所有列
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.CdcOperations.GetCdcTables">
            <summary>
            取已经开启CDC的表
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.CdcOperations.GetCdcColumns">
            <summary>
            取所有开启CDC的列
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Daos.IDaoExtends">
            <summary>
            数据访问标记接口
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IDaoExtends.CheckStatesInPara(WitsWay.Utilities.Daos.IDao,System.Collections.Generic.IList{System.Int32})">
            <summary>
            检查状态参数
            </summary>
            <param name="dao">数据访问接口对象</param>
            <param name="states">装填列表</param>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IDaoExtends.CheckStatesPara(WitsWay.Utilities.Daos.IDao,System.Int32)">
            <summary>
            检查状态参数
            </summary>
            <param name="dao">数据访问接口对象</param>
            <param name="states">装填列表</param>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IDaoExtends.CheckClausePara(WitsWay.Utilities.Daos.IDao,System.String)">
            <summary>
            检查语句参数
            </summary>
            <param name="dao">数据访问接口对象</param>
            <param name="clause">TSQL语句</param>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IDaoExtends.CheckKeysPara(WitsWay.Utilities.Daos.IDao,System.Collections.Generic.IList{System.String})">
            <summary>
            检查主键列表参数
            </summary>
            <param name="dao">数据访问接口对象</param>
            <param name="keys">主键列表</param>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IDaoExtends.CheckKeyPara(WitsWay.Utilities.Daos.IDao,System.String)">
            <summary>
            检查语句参数
            </summary>
            <param name="dao">数据访问接口对象</param>
            <param name="key">主键</param>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IDaoExtends.CheckKeysPara(WitsWay.Utilities.Daos.IDao,System.Collections.Generic.IList{System.Int32})">
            <summary>
            检查主键列表参数
            </summary>
            <param name="dao">数据访问接口对象</param>
            <param name="keys">主键列表</param>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IDaoExtends.CheckKeyPara(WitsWay.Utilities.Daos.IDao,System.Int32)">
            <summary>
            检查语句参数
            </summary>
            <param name="dao">数据访问接口对象</param>
            <param name="key">主键</param>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IDaoExtends.CheckPagePara(WitsWay.Utilities.Daos.IDao,WitsWay.Utilities.Entitys.PageParameter)">
            <summary>
            检查分页参数
            </summary>
            <param name="dao">数据访问接口对象</param>
            <param name="pagePara">分页参数</param>
        </member>
        <member name="T:WitsWay.Utilities.Daos.IDao">
            <summary>
            数据访问标记接口
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Daos.IDaoAttribute">
            <summary>
            数据访问接口标记
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Daos.DaoAttribute">
            <summary>
            数据访问对象标记
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Daos.IRepositoryStates`2">
            <summary>
            数据存储通用接口（状态变更）
            <para>
            包含StatesByKey、StatesByKeys、StatesByClause
            </para>
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TData">数据类型</typeparam>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepositoryStates`2.StatesByKey(`0,System.Int32)">
            <summary>
            设置状态（多个状态Flags）
            </summary>
            <param name="key">主键</param>
            <param name="states">状态</param>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepositoryStates`2.StatesByKeys(System.Collections.Generic.IList{`0},System.Int32)">
            <summary>
            更新状态集
            </summary>
            <param name="keys">菜单Id</param>
            <param name="states">状态集</param>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepositoryStates`2.StatesByClause(System.String,System.Int32)">
            <summary>
            设置状态集
            </summary>
            <param name="filterClause">过滤语句</param>
            <param name="states">状态集</param>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepositoryStates`2.GetAllByStates(System.Int32)">
            <summary>
            获取所有数据（状态相等）
            </summary>
            <param name="states">状态集</param>
            <returns>返回所有实体列表</returns>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepositoryStates`2.GetAllStatesIn(System.Collections.Generic.IList{System.Int32})">
            <summary>
            获取所有数据（包含状态集中的一个或多个状态）
            </summary>
            <param name="states">状态集</param>
            <returns>返回所有实体列表</returns>
        </member>
        <member name="T:WitsWay.Utilities.Daos.IRepositoryBulk`2">
            <summary>
            数据存储通用接口（批量操作）
            <para>
            包含BulkDelete、BulkInsert、BulkUpdate、BulkSync
            </para>
            </summary>
            <typeparam name="TData">要存取的实例对象</typeparam>
            <typeparam name="TKey">键类型</typeparam>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepositoryBulk`2.BulkDelete(System.Collections.Generic.IList{`0})">
            <summary>
            通过主键列表删除数据
            </summary>
            <param name="keys">主键列表</param>
            <returns>删除条数</returns>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepositoryBulk`2.BulkGetByKeys(System.Collections.Generic.IList{`0})">
            <summary>
            批量获取
            </summary>
            <param name="keys">键列表</param>
            <returns>数据列表</returns>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepositoryBulk`2.BulkInsert(System.Collections.Generic.IList{`1},System.Data.SqlClient.SqlTransaction)">
            <summary>
            批量插入
            </summary>
            <param name="datas">实体列表</param>
            <returns>批量插入结果</returns>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepositoryBulk`2.BulkUpdate(System.Collections.Generic.IList{`1},System.Data.SqlClient.SqlTransaction)">
            <summary>
            批量更新
            </summary>
            <param name="datas">实体列表</param>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepositoryBulk`2.BulkSync(System.Collections.Generic.IList{`1},System.Data.SqlClient.SqlTransaction)">
            <summary>
            批量同步（插入、更新、删除）
            </summary>
            <param name="datas">实体列表</param>
        </member>
        <member name="T:WitsWay.Utilities.Daos.IRepositorySearch`2">
            <summary>
            数据存储通用接口（搜索数据，兼容历史调用方式）
            <para>多个TFilter通过实现多个接口实现</para>
            </summary>
            <typeparam name="TData">实体类型</typeparam>
            <typeparam name="TFilter">筛选对象类型</typeparam>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepositorySearch`2.Search(WitsWay.Utilities.Entitys.PagerFilterPara{`1})">
            <summary>
            获取分页结果集
            </summary>
            <param name="filter">筛选条件载体</param>
            <returns>分页结果集</returns>
        </member>
        <member name="T:WitsWay.Utilities.Daos.IRepositoryClause`1">
            <summary>
            数据存储通用接口（筛选语句）
            <para>
            包含DeleteByClause、GetOneByClause、GetListByClause、GetPageByClause
            </para>
            </summary>
            <typeparam name="TData">要存取的实例对象</typeparam>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepositoryClause`1.DeleteByClause(System.String)">
            <summary>
            物理删除
            </summary>
            <param name="filterClause">过滤语句</param>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepositoryClause`1.GetOneByClause(System.String,System.Collections.Generic.List{WitsWay.Utilities.Entitys.SortColumn})">
            <summary>
            搜索
            </summary>
            <param name="filterClause">筛选语句</param>
            <param name="sortColumns">排序列</param>
            <returns>分页结果集</returns>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepositoryClause`1.GetListByClause(System.String)">
            <summary>
            搜索
            </summary>
            <param name="filterClause">筛选语句</param>
            <returns>分页结果集</returns>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepositoryClause`1.GetPageByClause(WitsWay.Utilities.Entitys.PageParameter,System.String)">
            <summary>
            搜索
            </summary>
            <param name="pageParameter">分页参数</param>
            <param name="filterClause">筛选语句</param>
            <returns>分页结果集</returns>
        </member>
        <member name="T:WitsWay.Utilities.Daos.IRepository`2">
            <summary>
            数据存储通用接口
            <para>
            包含Insert、Update、DeleteByKey、GetAll、GetByKey
            </para>
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TData">要存取的实例对象</typeparam>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepository`2.Insert(`1)">
            <summary>
            添加
            </summary>
            <param name="data">添加的数据实例</param>
            <returns>添加实例的自增主键</returns>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepository`2.Update(`1)">
            <summary>
            修改
            </summary>
            <param name="data">修改的数据实例</param>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepository`2.DeleteByKey(`0)">
            <summary>
            物理删除
            </summary>
            <param name="key">主键</param>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepository`2.GetAll">
            <summary>
            获取所有数据
            </summary>
            <returns>返回所有实体列表</returns>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepository`2.GetByKey(`0)">
            <summary>
            通过主键获取数据
            </summary>
            <param name="id">主键id</param>
            <returns>返回实体</returns>
        </member>
        <member name="T:WitsWay.Utilities.Daos.IRepositoryExist`1">
            <summary>
            数据存储通用接口（存在判断）
            <para>
            包含ExistKey、ExistKeys、ExistByClause
            </para>
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepositoryExist`1.ExistKey(`0)">
            <summary>
            是否存在对应主键的数据
            </summary>
            <param name="key">主键</param>
            <returns>存在true，不存在false</returns>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepositoryExist`1.ExistKeys(System.Collections.Generic.IList{`0})">
            <summary>
            是否存在页面项
            </summary>
            <param name="keys">id</param>
            <returns>存在数据条数</returns>
        </member>
        <member name="M:WitsWay.Utilities.Daos.IRepositoryExist`1.ExistByClause(System.String)">
            <summary>
            是否存在
            </summary>
            <param name="filterClause">筛选语句</param>
            <returns>存在true，不存在false</returns>
        </member>
        <member name="T:WitsWay.Utilities.Attributes.EnumFieldAttribute">
            <summary>
            把枚举值按照指定的文本显示
            <example>
            EnumField.GetEnumText(typeof(MyEnum));
            EnumField.GetFieldText(MyEnum.EnumField);
            EnumField.GetFieldInfos(typeof(MyEnum));  
            </example>
            </summary>
            <summary>
            把枚举值按照指定的文本显示
            <example>
            EnumField.GetEnumText(typeof(MyEnum));
            EnumField.GetFieldText(MyEnum.EnumField);
            EnumField.GetFieldInfos(typeof(MyEnum));  
            </example>
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Attributes.EnumFieldAttribute.GetEnumText(System.Type)">
            <summary>
            得到对枚举的描述文本
            </summary>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Attributes.EnumFieldAttribute.GetFieldText(System.Object)">
            <summary>
            获得指定枚举类型中，指定值的描述文本。
            </summary>
            <param name="enumValue">枚举值，不要作任何类型转换</param>
            <returns>描述字符串</returns>
        </member>
        <member name="M:WitsWay.Utilities.Attributes.EnumFieldAttribute.GetFieldInfo(System.Object)">
            <summary>
            获得指定枚举类型中，指定值的描述文本。
            </summary>
            <param name="enumValue">枚举值，不要作任何类型转换</param>
            <returns>描述字符串</returns>
        </member>
        <member name="M:WitsWay.Utilities.Attributes.EnumFieldAttribute.GetFieldInfos(System.Type)">
            <summary>
            得到枚举类型定义的所有文本
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <param name="enumType">枚举类型</param>
        </member>
        <member name="M:WitsWay.Utilities.Attributes.EnumFieldAttribute.GetFlagShow``1(``0,System.String)">
            <summary>
            列标签显示
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Attributes.EnumFieldAttribute.GetEnumList``1(``0[])">
            <summary>
            得到枚举项列表
            </summary>
            <param name="ignores">忽略枚举项</param>
        </member>
        <member name="M:WitsWay.Utilities.Attributes.EnumFieldAttribute.#ctor(System.String)">
            <summary>
            描述枚举值
            </summary>
            <param name="displayText">描述内容</param>
        </member>
        <member name="P:WitsWay.Utilities.Attributes.EnumFieldAttribute.DisplayText">
            <summary>
            枚举显示文本
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Attributes.EnumFieldAttribute.EnumValue">
            <summary>
            枚举值
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Attributes.EnumFieldAttribute.FieldName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Attributes.EnumFieldAttribute.ToString">
            <summary>
             重写ToString
            </summary>
            <returns>EnumDisplayText</returns>
        </member>
        <member name="T:WitsWay.Utilities.Compare.CompareObjects">
             <summary>
             Class that allows comparison of two objects of the same type to each other.  Supports classes, lists, arrays, dictionaries, child comparison and more.
             </summary>
             <example>
             
             CompareObjects compareObjects = new CompareObjects();
             
             Person person1 = new Person();
             person1.DateCreated = DateTime.Now;
             person1.Name = "Greg";
            
             Person person2 = new Person();
             person2.Name = "John";
             person2.DateCreated = person1.DateCreated;
            
             if (!compareObjects.Compare(person1, person2))
                Console.WriteLine(compareObjects.DifferencesString);
             
             </example>
        </member>
        <member name="F:WitsWay.Utilities.Compare.CompareObjects._parents">
            <summary>
            Keep track of parent objects in the object hiearchy
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Compare.CompareObjects._propertyCache">
            <summary>
            Reflection Cache for property info
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Compare.CompareObjects._fieldCache">
            <summary>
            Reflection Cache for field info
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Compare.CompareObjects._methodList">
            <summary>
            Reflection Cache for methods
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.ElapsedMilliseconds">
            <summary>
            The amount of time in milliseconds it took for the comparison
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.ShowBreadcrumb">
            <summary>
            Show breadcrumb at each stage of the comparision.  
            This is useful for debugging deep object graphs.
            The default is false
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.ElementsToIgnore">
            <summary>
            Ignore classes, properties, or fields by name during the comparison.
            Case sensitive.
            </summary>
            <example>ElementsToIgnore.Add("CreditCardNumber")</example>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.ElementsToInclude">
            <summary>
            Only compare elements by name for classes, properties, and fields
            Case sensitive.
            </summary>
            <example>ElementsToInclude.Add("FirstName")</example>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.ComparePrivateProperties">
            <summary>
            If true, private properties and fields will be compared. The default is false.  Silverlight and WinRT restricts access to private variables.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.ComparePrivateFields">
            <summary>
            If true, private fields will be compared. The default is false.  Silverlight and WinRT restricts access to private variables.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.CompareStaticProperties">
            <summary>
            If true, static properties will be compared.  The default is true.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.CompareStaticFields">
            <summary>
            If true, static fields will be compared.  The default is true.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.CompareChildren">
            <summary>
            If true, child objects will be compared. The default is true. 
            If false, and a list or array is compared list items will be compared but not their children.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.CompareReadOnly">
            <summary>
            If true, compare read only properties (only the getter is implemented).
            The default is true.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.CompareFields">
            <summary>
            If true, compare fields of a class (see also CompareProperties).
            The default is true.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.IgnoreCollectionOrder">
            <summary>
            If true, compare each item within a collection to every item in the other (warning, setting this to true significantly impacts performance).
            The default is false.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.CompareProperties">
            <summary>
            If true, compare properties of a class (see also CompareFields).
            The default is true.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.MaxDifferences">
            <summary>
            The maximum number of differences to detect
            </summary>
            <remarks>
            Default is 1 for performance reasons.
            </remarks>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.Differences">
            <summary>
            The differences found during the compare
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.DifferencesString">
            <summary>
            The differences found in a string suitable for a textbox
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.AutoClearCache">
            <summary>
            Reflection properties and fields are cached. By default this cache is cleared after each compare.  Set to false to keep the cache for multiple compares.
            </summary>
            <seealso cref="P:WitsWay.Utilities.Compare.CompareObjects.Caching"/>
            <seealso cref="M:WitsWay.Utilities.Compare.CompareObjects.ClearCache"/>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.Caching">
            <summary>
            By default properties and fields for types are cached for each compare.  By default this cache is cleared after each compare.
            </summary>
            <seealso cref="P:WitsWay.Utilities.Compare.CompareObjects.AutoClearCache"/>
            <seealso cref="M:WitsWay.Utilities.Compare.CompareObjects.ClearCache"/>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.AttributesToIgnore">
            <summary>
            A list of attributes to ignore a class, property or field
            </summary>
            <example>AttributesToIgnore.Add(typeof(XmlIgnoreAttribute));</example>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.IgnoreObjectTypes">
            <summary>
            If true, objects will be compared ignore their type diferences
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.IsUseCustomTypeComparer">
            <summary>
            Func that determine when use CustomComparer for comparing specific type.
            Default value return permanent false value.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.CustomComparer">
            <summary>
            Action that performed for comparing objects.
            T1: contain current CompareObjects
            T2: object1 for comparing
            T3: object1 for comparing
            T4: current CompareObjects breadcrumb
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.ExpectedName">
            <summary>
            In the differences string, this is the name for expected name, default is Expected 
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.ActualName">
            <summary>
            In the differences string, this is the name for the actual name, default is Actual
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.DifferenceCallback">
            <summary>
            Callback invoked each time the comparer finds a difference
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.CompareObjects.CollectionMatchingSpec">
            <summary>
            Sometimes one wants to match items between collections by some key first, and then
            compare the matched objects.  Without this, the comparer basically says there is no 
            match in collection B for any given item in collection A that doesn't Compare with a result of true.  
            The results of this aren't particularly useful for object graphs that are mostly the same, but not quite. 
            Enter CollectionMatchingSpec
            
            the enumerable strings should be property (not field, for now, to keep it simple) names of the
            Type when encountered that will be used for matching
            
            You can use complex type properties, too, as part of the key to match.  To match on all props/fields on 
            such a matching key, Don't set this property (default comparer behavior)
            NOTE: types are looked up as exact.  e.g. if foo is an entry in the dictionary and bar is a 
            sub-class of foo, upon encountering a bar type, the comparer will not find the entry of foo
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.#ctor(System.Boolean)">
            <summary>
            Set up defaults for the comparison
            </summary>
            <param name="useAppConfigSettings">If true, use settings from the app.config</param>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.#ctor">
            <summary>
            Set up defaults for the comparison
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.Compare(System.Object,System.Object)">
            <summary>
            Compare two objects of the same type to each other.
            </summary>
            <remarks>
            Check the Differences or DifferencesString Properties for the differences.
            Default MaxDifferences is 1 for performance
            </remarks>
            <param name="object1"></param>
            <param name="object2"></param>
            <returns>True if they are equal</returns>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.ClearCache">
            <summary>
            Reflection properties and fields are cached. By default this cache is cleared automatically after each compare.
            </summary>
            <seealso cref="P:WitsWay.Utilities.Compare.CompareObjects.AutoClearCache"/>
            <seealso cref="P:WitsWay.Utilities.Compare.CompareObjects.Caching"/>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.Compare(System.Object,System.Object,System.String)">
            <summary>
            Compare two objects
            </summary>
            <param name="object1">The first object to compare</param>
            <param name="object2">The second object to compare</param>
            <param name="breadCrumb">Where we are in the object hiearchy</param>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.AddDifference(WitsWay.Utilities.Compare.Difference)">
            <summary>
            Add difference and perform a callback
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.CompareUri(System.Object,System.Object,System.String)">
            <summary>
            Compare an object of type URI
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.CompareType(System.Object,System.Object,System.String)">
            <summary>
            Compare an object of type Type (Runtime type)
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.CompareDataRow(System.Object,System.Object,System.String)">
            <summary>
            Compare all columns in a data row
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.CompareDataTable(System.Object,System.Object,System.String)">
            <summary>
            Compare all rows in a data table
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.CompareDataset(System.Object,System.Object,System.String)">
            <summary>
            Compare all tables and all rows in all tables
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.CompareTimespan(System.Object,System.Object,System.String)">
            <summary>
            Compare a timespan struct
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.ComparePointer(System.Object,System.Object,System.String)">
            <summary>
            Compare a pointer struct
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.CompareEnum(System.Object,System.Object,System.String)">
            <summary>
            Compare an enumeration
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.CompareSimpleType(System.Object,System.Object,System.String)">
            <summary>
            Compare a simple type
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.CompareStruct(System.Object,System.Object,System.String)">
            <summary>
            Compare a struct
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.CompareClass(System.Object,System.Object,System.String)">
            <summary>
            Compare the properties, fields of a class
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.PerformCompareFields(System.Type,System.Object,System.Object,System.Boolean,System.String)">
            <summary>
            Compare the fields of a class
            </summary>
            <param name="t1"></param>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="structCompare"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.GetFieldInfo(System.Type)">
            <summary>
            Get a list of the fields within a type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.PerformCompareProperties(System.Type,System.Object,System.Object,System.Boolean,System.String)">
            <summary>
            Compare the properties of a class
            </summary>
            <param name="t1"></param>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="structCompare"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.GetPropertyInfo(System.Type)">
            <summary>
            Get a list of the properties in a type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.CompareIndexer(System.Reflection.PropertyInfo,System.Object,System.Object,System.String)">
            <summary>
            Compare an integer indexer
            </summary>
            <param name="info"></param>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.CompareIDictionary(System.Object,System.Object,System.String)">
            <summary>
            Compare a dictionary
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.CompareIList(System.Object,System.Object,System.String)">
            <summary>
            Compare an array or something that implements IList
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.CompareHashSet(System.Object,System.Object,System.String)">
            <summary>
            Compare a HashSet
            </summary>
            <param name="object1"></param>
            <param name="object2"></param>
            <param name="breadCrumb"></param>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.IsTypeOfType(System.Type)">
            <summary>
            Returns true if the Type is a Runtime type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.IgnoredByAttribute(System.Reflection.MemberInfo)">
            <summary>
            Check if any type has attributes that should be bypassed
            </summary>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.GetPropertyValue(System.Type,System.Object,System.String)">
            <summary>
            Get the value of a property
            </summary>
            <param name="type"></param>
            <param name="objectValue"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.GetMethod(System.Type,System.String)">
            <summary>
            Get a method by name
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.GetMethods(System.Type)">
            <summary>
            Get the cached methods for a type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.NiceString(System.Object)">
            <summary>
            Convert an object to a nicely formatted string
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.AddBreadCrumb(System.String,System.String,System.String,System.Int32)">
            <summary>
            Add a breadcrumb to an existing breadcrumb
            </summary>
            <param name="existing"></param>
            <param name="name"></param>
            <param name="extra"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Compare.CompareObjects.AddBreadCrumb(System.String,System.String,System.String,System.String)">
            <summary>
            Add a breadcrumb to an existing breadcrumb
            </summary>
            <param name="existing"></param>
            <param name="name"></param>
            <param name="extra"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.Compare.Difference">
            <summary>
            Detailed information about the difference
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.Difference.ExpectedName">
            <summary>
            Name of Expected Object
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.Difference.ActualName">
            <summary>
            Name of Actual Object
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.Difference.PropertyName">
            <summary>
            The breadcrumb of the property leading up to the value
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.Difference.ChildPropertyName">
            <summary>
            The child property name
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.Difference.Object1Value">
            <summary>
            Object1 Value as a string
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.Difference.Object2Value">
            <summary>
            Object2 Value as a string
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.Difference.Object1">
            <summary>
            Object1 as a reference
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.Difference.Object2">
            <summary>
            Object2 as a reference
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.Difference.MessagePrefix">
            <summary>
            Prefix to put on the beginning of the message
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Compare.Difference.ToString">
            <summary>
            Nicely formatted string
            </summary>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.Compare.ICompareObjects">
            <summary>
            Public interface for mocking.  Mock yeah, bird yeah, yeah yeah.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.ShowBreadcrumb">
            <summary>
            Show breadcrumb at each stage of the comparision.  
            This is useful for debugging deep object graphs.
            The default is false
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.ElementsToIgnore">
            <summary>
            Ignore classes, properties, or fields by name during the comparison.
            Case sensitive.
            </summary>
            <example>ElementsToIgnore.Add("CreditCardNumber")</example>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.ElementsToInclude">
            <summary>
            Only compare elements by name for classes, properties, and fields
            Case sensitive.
            </summary>
            <example>ElementsToInclude.Add("FirstName")</example>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.ComparePrivateProperties">
            <summary>
            If true, private properties and fields will be compared. The default is false.  Silverlight and WinRT restricts access to private variables.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.ComparePrivateFields">
            <summary>
            If true, private fields will be compared. The default is false.  Silverlight and WinRT restricts access to private variables.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.CompareStaticProperties">
            <summary>
            If true, static properties will be compared.  The default is true.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.CompareStaticFields">
            <summary>
            If true, static fields will be compared.  The default is true.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.CompareChildren">
            <summary>
            If true, child objects will be compared. The default is true. 
            If false, and a list or array is compared list items will be compared but not their children.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.CompareReadOnly">
            <summary>
            If true, compare read only properties (only the getter is implemented).
            The default is true.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.CompareFields">
            <summary>
            If true, compare fields of a class (see also CompareProperties).
            The default is true.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.IgnoreCollectionOrder">
            <summary>
            If true, compare each item within a collection to every item in the other (warning, setting this to true significantly impacts performance).
            The default is false.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.CompareProperties">
            <summary>
            If true, compare properties of a class (see also CompareFields).
            The default is true.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.MaxDifferences">
            <summary>
            The maximum number of differences to detect
            </summary>
            <remarks>
            Default is 1 for performance reasons.
            </remarks>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.Differences">
            <summary>
            The differences found during the compare
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.DifferencesString">
            <summary>
            The differences found in a string suitable for a textbox
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.AutoClearCache">
            <summary>
            Reflection properties and fields are cached. By default this cache is cleared after each compare.  Set to false to keep the cache for multiple compares.
            </summary>
            <seealso cref="P:WitsWay.Utilities.Compare.ICompareObjects.Caching"/>
            <seealso cref="M:WitsWay.Utilities.Compare.ICompareObjects.ClearCache"/>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.Caching">
            <summary>
            By default properties and fields for types are cached for each compare.  By default this cache is cleared after each compare.
            </summary>
            <seealso cref="P:WitsWay.Utilities.Compare.ICompareObjects.AutoClearCache"/>
            <seealso cref="M:WitsWay.Utilities.Compare.ICompareObjects.ClearCache"/>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.AttributesToIgnore">
            <summary>
            A list of attributes to ignore a class, property or field
            </summary>
            <example>AttributesToIgnore.Add(typeof(XmlIgnoreAttribute));</example>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.IgnoreObjectTypes">
            <summary>
            If true, objects will be compared ignore their type diferences
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.IsUseCustomTypeComparer">
            <summary>
            Func that determine when use CustomComparer for comparing specific type.
            Default value return permanent false value.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.CustomComparer">
            <summary>
            Action that performed for comparing objects.
            T1: contain current CompareObjects
            T2: object1 for comparing
            T3: object1 for comparing
            T4: current CompareObjects breadcrumb
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.ExpectedName">
            <summary>
            In the differences string, this is the name for expected name, default is Expected 
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.ActualName">
            <summary>
            In the differences string, this is the name for the actual name, default is Actual
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Compare.ICompareObjects.Compare(System.Object,System.Object)">
            <summary>
            Compare two objects of the same type to each other.
            </summary>
            <remarks>
            Check the Differences or DifferencesString Properties for the differences.
            Default MaxDifferences is 1 for performance
            </remarks>
            <param name="object1"></param>
            <param name="object2"></param>
            <returns>True if they are equal</returns>
        </member>
        <member name="M:WitsWay.Utilities.Compare.ICompareObjects.ClearCache">
            <summary>
            Reflection properties and fields are cached. By default this cache is cleared automatically after each compare.
            </summary>
            <seealso cref="P:WitsWay.Utilities.Compare.CompareObjects.AutoClearCache"/>
            <seealso cref="P:WitsWay.Utilities.Compare.CompareObjects.Caching"/>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.DifferenceCallback">
            <summary>
            Callback invoked each time the comparer finds a difference
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Compare.ICompareObjects.CollectionMatchingSpec">
            <summary>
            Sometimes one wants to match items between collections by some key first, and then
            compare the matched objects.  Without this, the comparer basically says there is no 
            match in collection B for any given item in collection A.  The results of this aren't
            particularly useful for graphs that are mostly the same, but not quite. Enter CollectionMatchingSpec
            
            the enumerable strings should be property (not field, for now, to keep it simple) names of the
            Type when encountered that will be used for matching
            
            to match on all props/fields: Don't set this property (default comparer behavior)
            NOTE: types are looked up as exact.  e.g. if foo is an entry in the dictionary and bar is a 
            sub-class of foo, upon encountering a bar type, the comparer will not find the entry of foo
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Compare.CompareSettings">
            <summary>
            比较设置
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Compare.CompareSettings.ElementsToIgnore">
            <summary>
            忽略元素
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Compare.CompareSettings.AttributesToIgnore">
            <summary>
            忽略标签
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Compare.CompareSettings.CompareStaticFields">
            <summary>
            是否比较静态字段
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Compare.CompareSettings.CompareStaticProperties">
            <summary>
            是否比较静态属性
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Compare.CompareSettings.ComparePrivateProperties">
            <summary>
            是否比较私有属性
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Compare.CompareSettings.ComparePrivateFields">
            <summary>
            是否比较私有字段
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Compare.CompareSettings.CompareChildren">
            <summary>
            是否比较子对象
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Compare.CompareSettings.CompareReadOnly">
            <summary>
            是否比较只读属性
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Compare.CompareSettings.CompareFields">
            <summary>
            是否比较字段
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Compare.CompareSettings.CompareProperties">
            <summary>
            是否比较属性
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Compare.CompareSettings.Caching">
            <summary>
            是否启用缓存
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Compare.CompareSettings.AutoClearCache">
            <summary>
            是否自动清理缓存
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Compare.CompareSettings.MaxDifferences">
            <summary>
            最大允许不同数量
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Compare.CompareSettings.IgnoreCollectionOrder">
            <summary>
            是否忽略集合顺序
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.EntityCast.CasterBuilder`2">
            <summary>
            转换器构建者
            </summary>
            <typeparam name="A">原类型</typeparam>
            <typeparam name="B">新类型</typeparam>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.CasterBuilder`2.BuildAll">
            <summary>
            构建转换器
            </summary>
            <returns>属性自动映射的转换器</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.CasterBuilder`2.SetAll">
            <summary>
            设置所有属性
            </summary>
            <returns>映射上下文文接口实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.CasterBuilder`2.NotSetAny">
            <summary>
            不设置任何属性映射
            </summary>
            <returns>映射上下文</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.CasterBuilder`2.IsAutoSetProperty(System.Reflection.PropertyInfo)">
            <summary>
            是否是自动映射属性
            </summary>
            <param name="property">属性信息元数据</param>
            <returns>是自动映射true，不是自动映射false</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.CasterBuilder`2.IsCollectionType(System.Type)">
            <summary>
            判断类型是否是集合
            </summary>
            <param name="type">类型</param>
            <returns>是集合true，不是集合false</returns>
        </member>
        <member name="T:WitsWay.Utilities.EntityCast.CasterBuilder`2.MapBuilderContext">
            <summary>
            映射上下文实现
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.CasterBuilder`2.MapBuilderContext.#ctor">
            <summary>
            映射上下文实现
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.CasterBuilder`2.MapBuilderContext.Set(System.Reflection.PropertyInfo)">
            <summary>
            设置B对应属性 With A对应属性
            </summary>
            <param name="property">属性信息</param>
            <returns>映射上下文对象</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.CasterBuilder`2.MapBuilderContext.Set``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            设置B对应属性 With A对应属性
            </summary>
            <typeparam name="P">属性类型</typeparam>
            <param name="propertySelector">属性选择器</param>
            <returns>映射上下文对象</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.CasterBuilder`2.MapBuilderContext.NotSet(System.Reflection.PropertyInfo)">
            <summary>
            不设置B对应属性 With A对应属性
            </summary>
            <param name="property">属性信息</param>
            <returns>映射上下文对象</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.CasterBuilder`2.MapBuilderContext.NotSet``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            不设置B对应属性 With A对应属性
            </summary>
            <typeparam name="P">属性类型</typeparam>
            <param name="propertySelector">属性选择器</param>
            <returns>映射上下文对象</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.CasterBuilder`2.MapBuilderContext.SetIt(System.Reflection.PropertyInfo)">
            <summary>
            设置B对应属性
            </summary>
            <param name="property">B对应属性</param>
            <returns>映射上下文对象2</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.CasterBuilder`2.MapBuilderContext.SetIt``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            设置B对应属性
            </summary>
            <typeparam name="P">属性类型</typeparam>
            <param name="propertySelector">属性选择器</param>
            <returns>映射上下文对象2</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.CasterBuilder`2.MapBuilderContext.Build">
            <summary>
            构建<see cref="T:WitsWay.Utilities.EntityCast.IEntityCaster`2"/> 对象实例
            </summary>
            <returns> <see cref="T:WitsWay.Utilities.EntityCast.IEntityCaster`2"/>接口实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.CasterBuilder`2.MapBuilderContext.GetMappingKey">
            <summary>
            根据mapping构建一个键用于缓存
            </summary>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.CasterBuilder`2.MapBuilderContext.ExtractPropertyInfo``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            通过Expression获取属性信息
            </summary>
            <typeparam name="P">属性类型</typeparam>
            <param name="propertySelector">属性选择器</param>
            <returns>属性信息</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.CasterBuilder`2.MapBuilderContext.NormalizePropertyInfo(System.Reflection.PropertyInfo)">
            <summary>
            获取B的对应属性信息
            </summary>
            <param name="property">属性信息</param>
            <returns>属性信息</returns>
        </member>
        <member name="T:WitsWay.Utilities.EntityCast.CasterBuilder`2.MapBuilderContext.MapBuilderContextMap`1">
            <summary>
            映射上下文2
            </summary>
            <typeparam name="P">属性类型</typeparam>
        </member>
        <member name="T:WitsWay.Utilities.EntityCast.IEntityCaster`2">
            <summary>
            实体转换器
            </summary>
            <typeparam name="A">原类型</typeparam>
            <typeparam name="B">新类型</typeparam>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.IEntityCaster`2.CastEntity(`0)">
            <summary>
            转换实体
            </summary>
            <param name="a">原实体</param>
            <returns>新实体</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.IEntityCaster`2.CastList(System.Collections.Generic.IList{`0})">
            <summary>
            转换列表
            </summary>
            <param name="aList">A对象列表</param>
            <returns>B对象列表</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.IEntityCaster`2.CastPage(WitsWay.Utilities.Entitys.PageResult{`0})">
            <summary>
            转换页
            </summary>
            <param name="aPage">A分页信息</param>
            <returns>B分页信息</returns>
        </member>
        <member name="T:WitsWay.Utilities.EntityCast.IMapBuilderContext`2">
            <summary>
            映射构建上下文接口
            </summary>
            <typeparam name="A">原类型</typeparam>
            <typeparam name="B">新类型</typeparam>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.IMapBuilderContext`2.Set(System.Reflection.PropertyInfo)">
            <summary>
            设置B对应属性 With A对应属性
            </summary>
            <param name="property">属性信息</param>
            <returns>映射上下文对象</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.IMapBuilderContext`2.Set``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            设置B对应属性 With A对应属性
            </summary>
            <typeparam name="P">属性类型</typeparam>
            <param name="propertySelector">属性选择器</param>
            <returns>映射上下文对象</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.IMapBuilderContext`2.NotSet(System.Reflection.PropertyInfo)">
            <summary>
            不设置B对应属性 With A对应属性
            </summary>
            <param name="property">属性信息</param>
            <returns>映射上下文对象</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.IMapBuilderContext`2.NotSet``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            不设置B对应属性 With A对应属性
            </summary>
            <typeparam name="P">属性类型</typeparam>
            <param name="propertySelector">属性选择器</param>
            <returns>映射上下文对象</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.IMapBuilderContext`2.SetIt(System.Reflection.PropertyInfo)">
            <summary>
            设置B对应属性
            </summary>
            <param name="property">B对应属性</param>
            <returns>映射上下文对象2</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.IMapBuilderContext`2.SetIt``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            设置B对应属性
            </summary>
            <typeparam name="P">属性类型</typeparam>
            <param name="propertySelector">属性选择器</param>
            <returns>映射上下文对象2</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.IMapBuilderContext`2.Build">
            <summary>
            构建<see cref="T:WitsWay.Utilities.EntityCast.IEntityCaster`2"/> 对象实例
            </summary>
            <returns> <see cref="T:WitsWay.Utilities.EntityCast.IEntityCaster`2"/>接口实例</returns>
        </member>
        <member name="T:WitsWay.Utilities.EntityCast.IMapBuilderContextMap`3">
            <summary>
            映射上下文 成员映射对象
            </summary>
            <typeparam name="A">A类型</typeparam>
            <typeparam name="B">B类型</typeparam>
            <typeparam name="P">属性类型</typeparam>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.IMapBuilderContextMap`3.With(System.String)">
            <summary>
            映射A.当前属性，用B的对应属性名
            </summary>
            <param name="propertyName">B的属性名</param>
            <returns>映射上下文对象</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.IMapBuilderContextMap`3.With(System.Reflection.PropertyInfo)">
            <summary>
            映射A.当前属性 ，用B对应属性
            </summary>
            <param name="property">B.属性信息</param>
            <returns>映射上下文对象</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.IMapBuilderContextMap`3.With(System.Func{`0,`2})">
            <summary>
            自定义映射
            </summary>
            <param name="f">传入A类型对象，返回P类型值</param>
            <returns>映射上下文对象</returns>
        </member>
        <member name="T:WitsWay.Utilities.EntityCast.PropertyMapping`1">
            <summary>
            属性映射信息
            </summary>
            <typeparam name="A">原类型</typeparam>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.PropertyMapping`1.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            属性映射信息
            </summary>
            <param name="property">B对应属性信息</param>
        </member>
        <member name="P:WitsWay.Utilities.EntityCast.PropertyMapping`1.Property">
            <summary>
            Get要映射的B对应属性信息
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.PropertyMapping`1.GetPropertyValue(`0)">
            <summary>
            获取A的对应属性值
            </summary>
            <param name="a">原实体</param>
            <returns>属性值</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.PropertyMapping`1.Map(System.Object,`0)">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <param name="a"></param>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.PropertyMapping`1.SetValue(System.Object,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="instance">B实例</param>
            <param name="value">属性值</param>
        </member>
        <member name="T:WitsWay.Utilities.EntityCast.PropertyNameMapping`1">
            <summary>
            属性名映射信息
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.PropertyNameMapping`1.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            属性名映射信息
            </summary>
            <param name="property">B的属性信息</param>
            <param name="propertyName">A的属性名</param>
        </member>
        <member name="P:WitsWay.Utilities.EntityCast.PropertyNameMapping`1.PropertyName">
            <summary>
            A的属性名
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.PropertyNameMapping`1.GetPropertyValue(`0)">
            <summary>
            取得属性值
            </summary>
            <param name="a">A实体</param>
            <returns>A的对应名称属性值</returns>
        </member>
        <member name="T:WitsWay.Utilities.EntityCast.FuncMapping`1">
            <summary>
            Func映射信息
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.FuncMapping`1.#ctor(System.Reflection.PropertyInfo,System.Func{`0,System.Object})">
            <summary>
            Func映射信息
            </summary>
            <param name="property">B的属性信息</param>
            <param name="func">从A获取对应值的Func</param>
        </member>
        <member name="P:WitsWay.Utilities.EntityCast.FuncMapping`1.Func">
            <summary>
            从A获取属性值Func
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.FuncMapping`1.GetPropertyValue(`0)">
            <summary>
            获取属性值
            </summary>
            <param name="a">A实体</param>
            <returns>值</returns>
        </member>
        <member name="T:WitsWay.Utilities.EntityCast.ReflectionCaster`2">
            <summary>
            <see cref="T:WitsWay.Utilities.EntityCast.IEntityCaster`2"/>的实现,通过反射转换A为B
            通过 <see cref="T:WitsWay.Utilities.EntityCast.CasterBuilder`2"/> API创建实例.
            </summary>
            <typeparam name="A">原类型</typeparam>
            <typeparam name="B">新类型</typeparam>
            <seealso cref="T:WitsWay.Utilities.EntityCast.CasterBuilder`2"/>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.ReflectionCaster`2.#ctor(System.Collections.Generic.IDictionary{System.Reflection.PropertyInfo,WitsWay.Utilities.EntityCast.PropertyMapping{`0}})">
            <summary>
            创建<see cref="T:WitsWay.Utilities.EntityCast.ReflectionCaster`2"/>实例
            </summary>
            <param name="propertyMappings">字典</param>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.ReflectionCaster`2.CastEntity(`0)">
            <summary>
            映射A为B
            </summary>
            <param name="a">原对象</param>
            <returns>新队形</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.ReflectionCaster`2.CastList(System.Collections.Generic.IList{`0})">
            <summary>
            映射A列表 为 B列表
            </summary>
            <param name="aList">A列表</param>
            <returns>B列表</returns>
        </member>
        <member name="M:WitsWay.Utilities.EntityCast.ReflectionCaster`2.CastPage(WitsWay.Utilities.Entitys.PageResult{`0})">
            <summary>
            映射分页结果集
            </summary>
            <param name="aPage">A分页结果集</param>
            <returns>B分页结果集</returns>
        </member>
        <member name="T:WitsWay.Utilities.Entitys.IdTextValueData`1">
            <summary>
            ID-Text-Data，用于Combo绑定
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.IdTextValueData`1.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.IdTextValueData`1.Text">
            <summary>
            显示文字
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.IdTextValueData`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.IdTextValueData`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Entitys.IdTextValueData`1.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.Entitys.IdTextData">
            <summary>
            ID-Text-Data，用于Combo绑定
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.IdTextData.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.IdTextData.Text">
            <summary>
            显示文字
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.IdTextData.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Entitys.IdTextData.GetData``1">
            <summary>
            获取数据
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Entitys.IdTextData.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Entitys.IdTextData.GetTypeCode">
            <summary>
            GetTypeCode
            </summary>
            <returns><see cref="T:System.TypeCode"/></returns>
        </member>
        <member name="T:WitsWay.Utilities.Entitys.PagerFilterPara`1">
            <summary>
             表格搜索对象
            </summary>
            <typeparam name="TFilter">过滤条件实体类</typeparam>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.PagerFilterPara`1.Filter">
            <summary>
            过滤条件对象
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.PagerFilterPara`1.Pager">
            <summary>
            分页参数
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Entitys.BulkInsertResult">
            <summary>
            批量插入结果
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.BulkInsertResult.Action">
            <summary>
            操作行为,update ,insert,delete
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.BulkInsertResult.DeletedId">
            <summary>
            删除的ID
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.BulkInsertResult.InsertedId">
            <summary>
            添加的ID
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Entitys.IntIdStringValue">
            <summary>
            ID↔值
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Entitys.IntIdStringValue.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Entitys.IntIdStringValue.#ctor(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="val"></param>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.IntIdStringValue.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.IntIdStringValue.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Entitys.IntIdIntValue">
            <summary>
            ID↔值
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Entitys.IntIdIntValue.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Entitys.IntIdIntValue.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="val"></param>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.IntIdIntValue.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.IntIdIntValue.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Entitys.PageParameter">
            <summary>
            分页参数
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.PageParameter.PageIndex">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.PageParameter.PageSize">
            <summary>
            每页显示条数
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.PageParameter.SortColumns">
            <summary>
            排序列集合
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Entitys.PageResult`1">
            <summary>
            分页结果集
            </summary>
            <typeparam name="T">分页实体</typeparam>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.PageResult`1.PageIndex">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.PageResult`1.PageSize">
            <summary>
            每页显示条数
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.PageResult`1.PageCount">
            <summary>
            Get总页数
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.PageResult`1.TotalRecordNum">
            <summary>
            总数据条数
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.PageResult`1.Rows">
            <summary>
            Get当前页数据
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Entitys.PageResult`1.CalculateTotalPages(System.Int32,System.Int32)">
            <summary>
            计算总页数
            </summary>
            <param name="totalRecords">总记录数</param>
            <param name="pageSize">每页条数</param>
            <returns>页数</returns>
        </member>
        <member name="M:WitsWay.Utilities.Entitys.PageResult`1.ConvertTo``1(System.Func{`0,``0})">
            <summary>
            将一种类型的PageResult转为另外一种类型的PageResult
            </summary>
            <typeparam name="TAnother">要转成的类型</typeparam>
            <param name="converter">转换器</param>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.Entitys.PageResultExtends">
            <summary>
            分页结果集扩展
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Entitys.PageResultExtends.MapPageResult``2(WitsWay.Utilities.Entitys.PageResult{``0},System.Func{``0,``1})">
            <summary>
            映射分页结果集
            </summary>
            <typeparam name="T1">源结果集类型</typeparam>
            <typeparam name="T2">目标结果集类型</typeparam>
            <param name="page">源分页结果集</param>
            <param name="expression">行转换方法</param>
            <returns>目标分页结果集</returns>
        </member>
        <member name="T:WitsWay.Utilities.Entitys.SortColumn">
            <summary>
            排序列
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.SortColumn.SortField">
            <summary>
            排序字段
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.SortColumn.Ascend">
            <summary>
            是否升序
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Entitys.StringIdIntValue">
            <summary>
            ID↔值
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Entitys.StringIdIntValue.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Entitys.StringIdIntValue.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="val"></param>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.StringIdIntValue.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.StringIdIntValue.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Entitys.StringIdStringValue">
            <summary>
            ID↔值
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Entitys.StringIdStringValue.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Entitys.StringIdStringValue.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="val"></param>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.StringIdStringValue.Id">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.StringIdStringValue.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Entitys.TimestampData`1">
            <summary>
            时间戳数据
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.TimestampData`1.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Entitys.TimestampData`1.Timestamp">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Enums.CrcAlgorithmKinds">
            <summary>
            CRC算法类型
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.CrcAlgorithmKinds.Crc32">
            <summary>
            Crc32
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.CrcAlgorithmKinds.Adler32">
            <summary>
            Adler32
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.CrcAlgorithmKinds.StrangeCrc">
            <summary>
            StrangeCrc
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Enums.HashAlgorithmKinds">
            <summary>
            Hash算法类型
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.HashAlgorithmKinds.Md5">
            <summary>
            MD5
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.HashAlgorithmKinds.Ripemd160">
            <summary>
            RIPEMD160
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.HashAlgorithmKinds.Sha160">
            <summary>
            SHA1
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.HashAlgorithmKinds.Sha256">
            <summary>
            SHA256
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.HashAlgorithmKinds.Sha384">
            <summary>
            SHA384
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.HashAlgorithmKinds.Sha512">
            <summary>
            SHA512
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Enums.RightOperations">
            <summary>
            权限操作
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.RightOperations.View">
            <summary>
            查看
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.RightOperations.Add">
            <summary>
            添加
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.RightOperations.Edit">
            <summary>
            修改
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.RightOperations.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.RightOperations.Remove">
            <summary>
            移除
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.RightOperations.Up">
            <summary>
            上移
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.RightOperations.Down">
            <summary>
            下移
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.RightOperations.AddGroup">
            <summary>
            添加
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.RightOperations.EditGroup">
            <summary>
            修改
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.RightOperations.DeleteGroup">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.RightOperations.RemoveGroup">
            <summary>
            移除
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.RightOperations.UpGroup">
            <summary>
            上移
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.RightOperations.DownGroup">
            <summary>
            下移
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Enums.PageFunctions">
            <summary>
            页面功能
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.PageFunctions.View">
            <summary>
            查看
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.PageFunctions.Add">
            <summary>
            添加
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.PageFunctions.CopyAdd">
            <summary>
            拷贝添加
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.PageFunctions.Edit">
            <summary>
            修改
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.PageFunctions.Audit">
            <summary>
            审核
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Enums.SequenceCircle">
            <summary>
            系统序列类型
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.SequenceCircle.Increase">
            <summary>
            递增序列
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.SequenceCircle.Day">
            <summary>
            以天为周期
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Enums.MenuKinds">
            <summary>
            菜单类型
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.MenuKinds.WebBlock">
            <summary>
            Web组集
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.MenuKinds.WebGroup">
            <summary>
            Web组
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.MenuKinds.WebMidMenu">
            <summary>
            Web菜单
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.MenuKinds.WebPopMenu">
            <summary>
            Web弹出菜单
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.MenuKinds.WinBlock">
            <summary>
            Win程序集
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.MenuKinds.WinMenuPage">
            <summary>
            WinForm组集
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.MenuKinds.WinMenuGroup">
            <summary>
            菜单组
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.MenuKinds.WinMenuMid">
            <summary>
            WinForm菜单
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.MenuKinds.WinMenuPop">
            <summary>
            WinForm弹出菜单
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.MenuKinds.WinMenuAction">
            <summary>
            执行方法菜单
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.MenuKinds.WinMenuGenericMid">
            <summary>
            泛型窗体菜单
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.MenuKinds.WinMenuGenericPop">
            <summary>
            泛型弹出菜单
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.MenuKinds.WinDropGroup">
            <summary>
            组菜单
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.MenuKinds.WinDropMenu">
            <summary>
            子菜单
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.MenuKinds.ReportGroup">
            <summary>
            报表分组
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.MenuKinds.ReportItem">
            <summary>
            报表项
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Enums.SubSystems">
            <summary>
            子系统枚举
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.SubSystems.InternalServer">
            <summary>
            内部服务
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.SubSystems.ShareCache">
            <summary>
            共享缓存
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.SubSystems.ShareTask">
            <summary>
            任务调度
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.SubSystems.ShareReport">
            <summary>
            报表中心
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.SubSystems.AppCenter">
            <summary>
            应用中心
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.SubSystems.ABM">
            <summary>
            基础管理平台（Application Basic Manage）
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.SubSystems.PDM">
            <summary>
            产品数据管理（Product Data Manage）
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.SubSystems.PPM">
            <summary>
            产品价格管理（Product Price Manage）
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.SubSystems.OrderPlatform">
            <summary>
            订单管理平台
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.SubSystems.MES">
            <summary>
            制造执行系统（Manufacturing Execution Systems）
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.SubSystems.SCM">
            <summary>
            供应链管理系统
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Enums.SubSystems.WMS">
            <summary>
            库房管理系统
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Extends.ImageExtends">
            <summary>
            图片扩展信息
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ImageExtends.ToBytes(System.Drawing.Image)">
            <summary>
            Image转换为byte数组
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Extends.EnumExtends">
            <summary>
            字符串扩展
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.EnumExtends.GetDescription(System.Enum)">
            <summary>
            获取“枚举值”描述信息
            </summary>
            <param name="enumValue">枚举值</param>
            <returns>枚举值描述</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.EnumExtends.GetEnumDescription(System.Enum)">
            <summary>
            获取“枚举”描述信息
            </summary>
            <param name="enumValue">枚举值</param>
            <returns>枚举描述</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.EnumExtends.GetFieldInfo(System.Enum)">
            <summary>
            获取“枚举”字段信息
            </summary>
            <param name="enumValue">枚举值</param>
            <returns>枚举字段信息</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.EnumExtends.GetValue(System.Enum)">
            <summary>
            取得枚举值
            </summary>
            <param name="enumValue">枚举</param>
            <returns>枚举值</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.EnumExtends.GetFieldInfos(System.Enum)">
            <summary>
            获取“枚举”所有字段信息
            </summary>
            <param name="enumValue">枚举值</param>
            <returns>枚举所有字段信息</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.EnumExtends.ToInt(System.Enum)">
            <summary>
            转换为Int值
            </summary>
            <param name="enumValue">枚举值</param>
            <returns>Int值</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.EnumExtends.ToIntString(System.Enum)">
            <summary>
            转换为对应Int值的String
            </summary>
            <param name="enumValue">枚举值</param>
            <returns>Int值对应的String</returns>
        </member>
        <member name="T:WitsWay.Utilities.Extends.DatabaseExtends">
            <summary>
            Database扩展方法
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.DatabaseExtends.GetDbCommand(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.CommandType,System.String)">
            <summary>
            获取DbCommand对象
            </summary>
            <param name="db"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/>对象</param>
            <param name="cmdType"><see cref="T:System.Data.CommandType"/>枚举</param>
            <param name="sql">TSQL语句</param>
            <returns><see cref="T:System.Data.Common.DbCommand"/>对象</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.DatabaseExtends.ReadList``1(Microsoft.Practices.EnterpriseLibrary.Data.Database,Microsoft.Practices.EnterpriseLibrary.Data.IRowMapper{``0},System.Data.CommandType,System.String)">
            <summary>
            读取列表
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="db"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/>对象</param>
            <param name="mapper">映射对象</param>
            <param name="cmdType">CommandType</param>
            <param name="sql">CommandText</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.DatabaseExtends.ReadList``1(Microsoft.Practices.EnterpriseLibrary.Data.Database,Microsoft.Practices.EnterpriseLibrary.Data.IRowMapper{``0},System.Data.Common.DbCommand)">
            <summary>
            读取列表
            读取列表
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="db"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/>对象</param>
            <param name="mapper">映射对象</param>
            <param name="cmd">DbCommand</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.DatabaseExtends.ReadList``1(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.CommandType,System.String)">
            <summary>
            读取列表,使用默认Mapper
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="db"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/>对象</param>
            <param name="cmdType">CommandType</param>
            <param name="sql">CommandText</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.DatabaseExtends.ReadList``1(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            读取列表,使用默认Mapper
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="db"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/>对象</param>
            <param name="cmd">DbCommand</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.DatabaseExtends.ReadRow``1(Microsoft.Practices.EnterpriseLibrary.Data.Database,Microsoft.Practices.EnterpriseLibrary.Data.IRowMapper{``0},System.Data.Common.DbCommand)">
            <summary>
            读取一行数据，无数据返回null，不抛出异常
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="db"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/>对象</param>
            <param name="mapper">映射对象</param>
            <param name="cmd"><see cref="T:System.Data.Common.DbCommand"/>对象</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.DatabaseExtends.ReadRow``1(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            读取一行数据，无数据返回null，不抛出异常，使用默认Mapper
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="db"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/>对象</param>
            <param name="cmd"><see cref="T:System.Data.Common.DbCommand"/>对象</param>
            <returns>实体列表</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.DatabaseExtends.CheckCommandType(System.Data.CommandType)">
            <summary>
            检查CommandType参数
            </summary>
            <param name="cmdType">CommandType</param>
        </member>
        <member name="M:WitsWay.Utilities.Extends.DatabaseExtends.ExecuteNonQueryZeroThrow(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand,System.String)">
            <summary>
            执行添加，添加影响行数0时抛出异常
            </summary>
            <param name="db"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Data.Database"/>对象</param>
            <param name="cmd"><see cref="T:System.Data.Common.DbCommand"/>对象</param>
            <param name="msg">备注信息</param>
        </member>
        <member name="T:WitsWay.Utilities.Extends.DataRowExtends">
            <summary>
            DataRow扩展方法
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.DataRowExtends.FieldIsNullOrNotExist(System.Data.DataRow,System.String)">
            <summary>
            字段是否为空或者不存在
            </summary>
            <param name="dr">数据源</param>
            <param name="fieldName">字段名称</param>
            <returns>不存在或者为Null返回true。</returns>
        </member>
        <member name="T:WitsWay.Utilities.Extends.DateTimeExtends">
            <summary>
            日期类型的扩展方法
            </summary>
            <remarks>
            SQL Server 2008除了DateTime和SmallDateTime之外，又新增了四种时间类型，分别为：date，time，datetime2和datetimeoffset。
            各时间类型范围、精度一览表：
            数据类型 时间范围 精度
            datetime 1753-01-01到9999-12-31 00:00:00 到 23:59:59.997 3.33毫秒
            smalldatetime 1900-01-01 到 2079-06-06 00:00:00 到 23:59:59 分钟
            date 0001-01-01 到 9999-12-31 天
            time 00:00:00.0000000 到 23:59:59.9999999 100 纳秒
            datetime2 0001-01-01 到 9999-12-31 00:00:00 到 23:59:59.9999999 100 纳秒
            datetimeoffset 0001-01-01 到 9999-12-31 00:00:00 到 23:59:59.9999999 -14:00 到 +14:00 100 纳秒
            各时间类型表达式一览表： 数据类型 输出 time 12:35:29. 1234567 date 2007-05-08 smalldatetime 2007-05-08 12:35:00 datetime 2007-05-08 12:35:29.123 datetime2 2007-05-08 12:35:29. 1234567 datetimeoffset 2007-05-08 12:35:29.1234567 +12:15
            </remarks>
        </member>
        <member name="F:WitsWay.Utilities.Extends.DateTimeExtends.MinSqlServerDateTime">
            <summary>
            T-SQL最小时间，按照smalldatetime作为依据确定
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Extends.DateTimeExtends.MaxSqlServerDateTime">
            <summary>
            T-SQL最大时间，按照smalldatetime作为依据确定
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.DateTimeExtends.ToDateString(System.Nullable{System.DateTime})">
            <summary>
            转为日期字符串
            </summary>
            <param name="dateTime">可空日期</param>
            <returns>yyyy-MM-dd表示的日期，或空字符串</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.DateTimeExtends.ToDateString(System.DateTime)">
            <summary>
            转为日期字符串
            </summary>
            <param name="dateTime">日期</param>
            <returns>yyyy-MM-dd表示的日期，或空字符串</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.DateTimeExtends.ToDateTimeString(System.Nullable{System.DateTime})">
            <summary>
            转为日期时间字符串
            </summary>
            <param name="dateTime">可空日期</param>
            <returns>yyyy-MM-dd HH:mm表示的日期，或空字符串</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.DateTimeExtends.ToDateTimeString(System.DateTime)">
            <summary>
            转为日期时间字符串，精确到分
            <para>格式：yyyy-MM-dd HH:mm</para>
            </summary>
            <param name="dateTime">日期</param>
            <returns>yyyy-MM-dd HH:mm表示的日期，或空字符串</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.DateTimeExtends.ToDateTimeStringSecond(System.DateTime)">
            <summary>
            转为日期时间字符串,精确到秒 
            <para>格式：yyyy-MM-dd HH:mm:ss</para>
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.DateTimeExtends.IsValidSqlServerDateTime(System.DateTime)">
            <summary>
            判断日期时间是否是合法的数据库日期时间值
            </summary>
            <param name="dateTime">日期</param>
            <returns>有效true，无效false</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.DateTimeExtends.GetValidSqlServerDateTimeOrNow(System.DateTime)">
            <summary>
            获取有效的SQL时间或当前日期
            </summary>
            <param name="dateTime">日期</param>
            <returns>有效日期本身，无效DateTime.Now</returns>
        </member>
        <member name="T:WitsWay.Utilities.Extends.ListExtensions">
            <summary>
            <see cref="T:System.Collections.Generic.List`1"/> 扩展方法
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ListExtensions.MoveToEnd``1(System.Collections.Generic.List{``0},System.Predicate{``0})">
            <summary>
            Moves the item matching the <paramref name="itemSelector"/> to the end of the <paramref name="list"/>.
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ListExtensions.MoveToBeginning``1(System.Collections.Generic.List{``0},System.Predicate{``0})">
            <summary>
            Moves the item matching the <paramref name="itemSelector"/> to the beginning of the <paramref name="list"/>.
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ListExtensions.MoveUp``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            上移
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ListExtensions.MoveDown``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            下移
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ListExtensions.Move``1(System.Collections.Generic.List{``0},System.Predicate{``0},System.Int32)">
            <summary>
            Moves the item matching the <paramref name="itemSelector"/> to the <paramref name="newIndex"/> in the <paramref name="list"/>.
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Extends.MethodExtends">
            <summary>
            方法扩展
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.MethodExtends.GetAttribute``1(System.Reflection.MethodInfo)">
            <summary>
            取得自定义特性
            </summary>
            <typeparam name="T">自定义Attribute类型</typeparam>
            <param name="method">方法信息</param>
            <returns>T实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.MethodExtends.GetCnNames(System.Enum,System.Collections.Generic.Dictionary{System.Enum,System.String})">
            <summary>
            枚举类型根据名称字典获取中文名称串的扩展方法
            </summary>
            <param name="en"></param>
            <param name="dict">该枚举类型的中文名称字典</param>
            <returns>转换后的中文名称串，如果缺少中文定义将抛异常</returns>
        </member>
        <member name="T:WitsWay.Utilities.Extends.ObjectExtends">
            <summary>
            Object扩展方法
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.RemoveEvent``1(``0,System.Delegate,System.String)">
            <summary>
            移除事件绑定
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entity">实体</param>
            <param name="eventDelegate">事件委托</param>
            <param name="eventName">事件名称</param>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.ConvertTo``1(System.Object)">
            <summary>
            转换对象为特定的类型，默认值为 default(T)
            </summary>
            <typeparam name = "T">要转换的类型</typeparam>
            <param name = "value">要转换的object</param>
            <returns>转换后T</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.ConvertTo``1(System.Object,``0)">
            <summary>
            转换对象为特定的类型，默认值为 default(T)
            </summary>
            <typeparam name = "T">要转换的类型</typeparam>
            <param name = "value">要转换的object</param>
            <param name="defaultValue">默认值</param>
            <returns>转换后T</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.ConvertTo``1(System.Object,``0,System.Boolean)">
            <summary>
            转换对象为特定的类型，默认值为 default(T)
            </summary>
            <typeparam name = "T">要转换的类型</typeparam>
            <param name = "value">要转换的object</param>
            <param name="defaultValue">默认值</param>
            <param name="ignoreException">忽略异常</param>
            <returns>转换后T</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.CanConvertTo``1(System.Object)">
            <summary>
            对象是否能被转换为特定的类型
            </summary>
            <param name="value">对象</param>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.CanConvertTo(System.Object,System.Type)">
            <summary>
            对象是否能被转换为特定的类型
            </summary>
            true则value可以转换为T，否则false
            <param name="targetType">类型</param>
            <param name="value">对象</param>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            通过反射动态调用方法methodName
            </summary>
            <param name = "obj">持有方法的对象</param>
            <param name = "methodName">方法名</param>
            <param name = "parameters">参数列表</param>
            <returns>方法返回值</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.InvokeMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            通过反射动态调用方法methodName，返回强类型对象
            </summary>
            <typeparam name = "T">期望返回的类型</typeparam>
            <param name = "obj">持有方法的对象</param>
            <param name = "methodName">方法名</param>
            <param name = "parameters">参数列表</param>
            <returns>返回值</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.GetPropertyValue(System.Object,System.String)">
            <summary>
            通过反射动态获取属性值
            </summary>
            <param name = "obj">持有属性的对象</param>
            <param name = "propertyName">属性名</param>
            <returns>属性值</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.GetPropertyValue``1(System.Object,System.String,``0)">
            <summary>
            取得强类型属性值
            </summary>
            <typeparam name = "T">返回值类型</typeparam>
            <param name = "obj">持有属性的对象</param>
            <param name="defaultValue">默认值</param>
            <param name = "propertyName">属性名</param>
            <returns>属性值</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            动态设置属性值
            </summary>
            <param name = "obj">要设置属性的对象</param>
            <param name = "propertyName">属性名</param>
            <param name = "value">值</param>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.GetAttribute``1(System.Object)">
            <summary>
            取得对象的标签实例
            </summary>
            <typeparam name = "T">要取得的的标签类型</typeparam>
            <param name = "obj">要获取的对象实例</param>
            <returns>标签实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.GetAttribute``1(System.Object,System.Boolean)">
            <summary>
            取得对象的标签实例
            </summary>
            <typeparam name = "T">要取得的的标签类型</typeparam>
            <param name = "obj">要获取的对象实例</param>
            <param name="includeInherited">是否包括继承的类型</param>
            <returns>标签实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.GetAttributes``1(System.Object)">
            <summary>
            取得所有的T类型标签
            </summary>
            <typeparam name = "T">标签类型</typeparam>
            <param name = "obj">获取对象</param>
            <returns>所有T类型标签</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.GetAttributes``1(System.Object,System.Boolean)">
            <summary>
            取得所有的T类型标签
            </summary>
            <typeparam name = "T">标签类型</typeparam>
            <param name = "obj">获取对象</param>
            <param name="includeInherited">是否包括继承的类型</param>
            <returns>所有T类型标签</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.IsType``1(System.Object)">
            <summary>
            对象是否为T类型
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.GetTypeDefaultValue``1(``0)">
            <summary>
            取得对应类型默认值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.AsString(System.Object)">
            <summary>
            转换为string
            </summary>
            <returns>
            target=null返回null，否则等同于ToString()
            </returns>
            <param name = "target">要ToString的对象</param>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.CastTo``1(System.Object)">
            <summary>
            转换类型
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.CastTo(System.Object,System.Type)">
            <summary>
            转换类型
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.Clone``1(``0)">
            <summary>
            克隆对象
            </summary>
            <typeparam name="T">克隆对象类型</typeparam>
            <param name="source">克隆源</param>
            <returns>深度克隆对象</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.PackJson``1(``0)">
            <summary>
            Json打包对象
            </summary>
            <param name="entity">实体对象</param>
            <typeparam name="T">对象类型</typeparam>
            <returns>序列化后字符串</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.PackXml``1(``0)">
            <summary>
            Xml打包对象
            </summary>
            <param name="entity">实体对象</param>
            <typeparam name="T">对象类型</typeparam>
            <returns>序列化后字符串</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ObjectExtends.Pack``1(``0,System.String)">
            <summary>
            打包对象
            </summary>
            <typeparam name="T">克隆对象类型</typeparam>
            <param name="entity">实体对象</param>
            <param name="parserName">解析器名称</param>
            <returns>序列化后字符串</returns>
        </member>
        <member name="T:WitsWay.Utilities.Extends.PropertyExtends">
            <summary>
            属性扩展
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.PropertyExtends.GetAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            取得对应属性的T自定义标签实例
            </summary>
            <typeparam name="T">自定义标签类型</typeparam>
            <param name="property">属性信息</param>
            <returns>自定义标签实例</returns>
        </member>
        <member name="T:WitsWay.Utilities.Extends.ByteExtends">
            <summary>
            字符串扩展
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ByteExtends.ToHexString(System.Byte[])">
            <summary>
            byte数组转16进制字符串
            </summary>
            <param name="bytes">byte数组</param>
            <returns>16进制字符串</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.ByteExtends.ToHexString2(System.Byte[])">
            <summary>
            byte数组转16进制字符串
            </summary>
            <param name="bytes">byte数组</param>
            <returns>16进制字符串</returns>
        </member>
        <member name="T:WitsWay.Utilities.Extends.TypeExtends">
            <summary>
            Type扩展
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.TypeExtends.GetAttribute``1(System.Type)">
            <summary>
            取得type的T特性实例
            </summary>
            <typeparam name="T">特性类型</typeparam>
            <param name="type">Type实例</param>
            <returns>T实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.TypeExtends.GetInstance(System.Type)">
            <summary>
            取得Type实例对象
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.TypeExtends.IsNumericType(System.Type)">
            <summary>
            判断是否为数值类型。
            </summary>
            <param name="t">要判断的类型</param>
            <returns>是否为数值类型</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.TypeExtends.IsNumericOrNullableNumericType(System.Type)">
            <summary>
            判断是否为可空数值类型。
            </summary>
            <param name="t">要判断的类型</param>
            <returns>是否为可空数值类型</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.TypeExtends.IsNullableType(System.Type)">
            <summary>
            判断是否为可空类型。
            注意，直接调用可空对象的.GetType()方法返回的会是其泛型值的实际类型，用其进行此判断肯定返回false。
            </summary>
            <param name="t">要判断的类型</param>
            <returns>是否为可空类型</returns>
        </member>
        <member name="T:WitsWay.Utilities.Extends.StringExtends">
            <summary>
            字符串扩展
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.StringExtends.CutStringLength(System.String,System.Int32,System.String)">
            <summary>
            截取标题字数
            </summary>
            <param name="str">准备截取的字符串</param>
            <param name="len">截取长度</param>
            <param name="suffix">超过长度显示字符串</param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.StringExtends.GetChineseInitial(System.String)">
            <summary>
            取得拼音首字母
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.StringExtends.ToHash(System.String,WitsWay.Utilities.Enums.HashAlgorithmKinds)">
            <summary>
            Hash加密
            </summary>
            <param name="str">字符串</param>
            <param name="hashAlgorithm">哈希类型</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">未实现对应的哈希Algorithm</exception>
        </member>
        <member name="M:WitsWay.Utilities.Extends.StringExtends.Left(System.String,System.Int32)">
            <summary>
            取左
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.StringExtends.Right(System.String,System.Int32)">
            <summary>
            取右
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.StringExtends.Middle(System.String,System.Int32,System.Int32)">
            <summary>
            取中
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.StringExtends.IsDate(System.String)">
            <summary>
            是否是日期
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.StringExtends.IsInt(System.String)">
            <summary>
            是否Int型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.StringExtends.IsBool(System.String)">
            <summary>
            是否Bool型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.StringExtends.Isdecimal(System.String)">
            <summary>
            是否Decimal型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.StringExtends.IsTinyint(System.String)">
            <summary>
            是否Tinyint型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.StringExtends.ToDateTime(System.String)">
            <summary>
            将string转为DateTime，如果字符串不是正确的日期值，将返回DateTime.MinValue
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.StringExtends.ToDateTimeNullable(System.String)">
            <summary>
            将string转为DateTime，如果字符串不是正确的日期值，将返回null
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.StringExtends.ToInt(System.String,System.Int32)">
            <summary>
            将字符串转为数字,如果转换失败则返回默认值
            </summary>
            <param name="source">字符串</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.StringExtends.AddCommaSplit(System.String)">
            <summary>
            将字符串转为数字,如果转换失败则返回默认值
            </summary>
            <param name="source">字符串</param>
            <returns>添加了逗号分隔的字符串</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.StringExtends.SplitToList``1(System.String)">
            <summary>
            解析实体
            </summary>
            <typeparam name="T">转换类型</typeparam>
            <param name="val">值</param>
            <returns>实体实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.StringExtends.ParseJson``1(System.String)">
            <summary>
            解析Json实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="val">值</param>
            <returns>实体实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.StringExtends.ParseXml``1(System.String)">
            <summary>
            解析Xml实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="val">值</param>
            <returns>实体实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.Extends.StringExtends.ParseEntity``1(System.String,System.String)">
            <summary>
            解析实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="val">值</param>
            <param name="providerName"> </param>
            <returns>实体实例</returns>
        </member>
        <member name="T:WitsWay.Utilities.Extends.EnumerableExtensions">
            <summary>
            IEnumerable扩展信息
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.EnumerableExtensions.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.EnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Extends.EnumerableExtensions.SafeForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            安全ForEach,当lst不为空，且lst中满足predicate条件的项存在时才执行循环操作
            </summary>
            <param name="lst">数据</param>
            <param name="action">循环执行方法体</param>
            <param name="predicate">循环筛选谓词，true执行，false不执行</param>
            <param name="changeList">循环执行方法体 是否变更了数据</param>
        </member>
        <member name="M:WitsWay.Utilities.Extends.EnumerableExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            串联字符串集合的成员，其中在每个成员之间使用指定的分隔符（默认使用;）。
            </summary>
            <param name="source"></param>
            <param name="spliter"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.StreamByteImageHelper">
            <summary>
            流、字节、图片辅助类
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.StreamByteImageHelper.StreamToBytes(System.IO.Stream)">
            <summary>
            将 Stream 转成 byte[]
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.StreamByteImageHelper.BytesToStream(System.Byte[])">
            <summary>
            将 byte[] 转成 Stream
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.StreamByteImageHelper.ByteArrayToImage(System.Byte[])">
            <summary> 
            字节数组转换成图片 
            </summary> 
        </member>
        <member name="M:WitsWay.Utilities.Helpers.StreamByteImageHelper.ImageToByteArray(System.Drawing.Image)">
            <summary>
             图片转换成字节流 
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.ExceptionHelper">
            <summary>
            系统错误辅助类
            </summary>
            <summary>
            系统错误辅助类
            </summary>
            <summary>
            系统错误辅助类
            </summary>
            <summary>
            异常助手
            <para>封装了一些异常抛出辅助方法</para>
            </summary>
            <summary>
            异常助手
            <para>封装了一些异常抛出辅助方法</para>
            </summary>
            <summary>
            系统错误辅助类
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.HandleExceptionClient(System.Action,System.String)">
            <summary>
            处理异常
            </summary>
            <param name="action">Action委托</param>
            <param name="serviceName">服务名</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.HandleExceptionClient(System.Action,System.String,System.Action,System.Action)">
            <summary>
            处理异常
            </summary>
            <param name="action">Action委托</param>
            <param name="serviceName">服务名</param>
            <param name="successAction">成功回调</param>
            <param name="failAction">失败回调</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.HandleExceptionClient``1(System.Func{``0},System.String)">
            <summary>
            处理异常
            </summary>
            <param name="fun">Func委托</param>
            <param name="serviceName">服务名</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.HandleExceptionClient``1(System.Func{``0},System.String,System.Action,System.Action)">
            <summary>
            处理异常
            </summary>
            <param name="fun">Func委托</param>
            <param name="serviceName">服务名</param>
            <param name="successAction">成功回调</param>
            <param name="failAction">失败回调</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.HandleExceptionService(System.Action,System.String)">
            <summary>
            处理服务异常
            </summary>
            <param name="action">Action委托</param>
            <param name="serviceName">服务名称</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.HandleExceptionService``1(System.Func{``0},System.String)">
            <summary>
            处理服务异常
            </summary>
            <param name="fun">One输出No输入Func委托</param>
            <param name="serviceName">服务名称</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.HandleException(System.Action,System.String)">
            <summary>
            处理异常
            </summary>
            <param name="action">Action执行体</param>
            <param name="customMessage">自定义错误信息</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.HandleException``1(System.Action,System.Action,System.Func{``0,System.Exception,System.String},``0)">
            <summary>
            处理异常
            </summary>
            <param name="action">Action执行体</param>
            <param name="msgFunc">错误消息组织函数</param>
            <param name="msgPara">错误消息参数</param>
            <param name="final">try,catch,finally块中执行的Action方法</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.HandleException``1(System.Func{``0},System.String)">
            <summary>
            处理异常
            </summary>
            <param name="func">带返回数据的方法执行体</param>
            <param name="customMessage">自定义错误信息</param>
            <returns>func调用的返回数据</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.HandleException``2(System.Func{``0},System.Action,System.Func{``1,System.Exception,System.String},``1)">
            <summary>
            处理异常
            </summary>
            <param name="func">带返回数据的方法执行体</param>
            <param name="final">try,catch,finally块中执行的Action方法</param>
            <param name="msgFunc">错误消息组织函数</param>
            <param name="msgPara">错误消息参数</param>
            <typeparam name="TResult">返回结果类型</typeparam>
            <typeparam name="TPara">错误消息组织参数类型</typeparam>
            <returns>func调用的返回数据</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.ThrowProgramException(System.Enum,System.Exception,System.String[])">
            <summary>
            记录/抛出程序异常
            <para>会记录“原始异常”和“程序异常”两条异常日志</para>
            </summary>
            <param name="err">错误枚举</param>
            <param name="ex">原始异常,异常信息会写入日志</param>
            <param name="paras">格式化参数</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.ThrowProgramException(System.Enum,System.String[])">
            <summary>
            记录/抛出程序异常
            <para>会记录“程序异常”异常日志</para>
            </summary>
            <param name="err">错误枚举</param>
            <param name="paras">格式化参数</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.ThrowProgramException(WitsWay.Utilities.Errors.ErrorSystems,System.Enum,System.String[])">
            <summary>
            记录/抛出程序异常
            <para>会记录“程序异常”异常日志</para>
            </summary>
            <param name="sys">系统</param>
            <param name="err">错误枚举</param>
            <param name="paras">格式化参数</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.ThrowProgramException(System.String,System.Enum,System.Exception)">
            <summary>
            记录/抛出程序异常
            <para>会记录“原始异常”和“程序异常”两条异常日志</para>
            </summary>
            <param name="msg">自定义错误消息</param>
            <param name="err">错误枚举</param>
            <param name="ex">原始异常,异常信息会写入日志</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.ThrowProgramException(System.String,System.Enum)">
            <summary>
            记录/抛出程序异常
            <para>会记录“程序异常”异常日志</para>
            </summary>
            <param name="err">错误枚举</param>
            <param name="msg">自定义错误消息</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.ThrowProgramException(System.String,WitsWay.Utilities.Errors.ErrorSystems,System.Enum)">
            <summary>
            记录/抛出程序异常
            <para>会记录“程序异常”异常日志</para>
            </summary>
            <param name="sys">系统</param>
            <param name="err">错误枚举</param>
            <param name="msg">自定义错误消息</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.ThrowBusinessException(System.Enum,System.Exception,System.String[])">
            <summary>
            记录/抛出业务异常
            </summary>
            <param name="err">错误枚举</param>
            <param name="ex">原始异常,异常信息会写入日志</param>
            <param name="paras">格式化参数</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.ThrowBusinessException(System.Enum,System.String[])">
            <summary>
            抛出业务异常
            </summary>
            <param name="err">错误枚举</param>
            <param name="paras">格式化参数</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.ThrowBusinessException(WitsWay.Utilities.Errors.ErrorSystems,System.Enum,System.String[])">
            <summary>
            抛出业务异常
            </summary>
            <param name="sys">系统</param>
            <param name="err">错误枚举</param>
            <param name="paras">格式化参数</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.ThrowBusinessException(System.String,System.Enum,System.Exception)">
            <summary>
            记录/抛出业务异常
            </summary>
            <param name="msg">自定义错误消息</param>
            <param name="err">错误枚举</param>
            <param name="ex">原始异常,异常信息会写入日志</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.ThrowBusinessException(System.String,System.Enum)">
            <summary>
            抛出业务异常
            </summary>
            <param name="msg">自定义错误消息</param>
            <param name="err">错误枚举</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.ThrowBusinessException(System.String,WitsWay.Utilities.Errors.ErrorSystems,System.Enum)">
            <summary>
            抛出业务异常
            </summary>
            <param name="msg">自定义错误消息</param>
            <param name="sys">系统</param>
            <param name="err">错误枚举</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.GetBusinessException(System.Enum,System.String[])">
            <summary>
            获取业务异常
            </summary>
            <param name="err">错误枚举</param>
            <param name="paras">格式化参数</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.GetBusinessException(System.String,System.Enum)">
            <summary>
            获取业务异常
            </summary>
            <param name="msg">自定义消息</param>
            <param name="err">错误枚举</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.GetBusinessException(System.String,WitsWay.Utilities.Errors.ErrorSystems,System.Enum)">
            <summary>
            获取业务异常
            </summary>
            <param name="msg">自定义消息</param>
            <param name="sys">系统</param>
            <param name="err">错误枚举</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.GetProgramException(System.Enum,System.String[])">
            <summary>
            获取业务异常
            </summary>
            <param name="err">错误枚举</param>
            <param name="paras">格式化参数</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.GetProgramException(System.String,System.Enum)">
            <summary>
            获取业务异常
            </summary>
            <param name="msg">自定义消息</param>
            <param name="err">错误枚举</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.GetProgramException(System.String,WitsWay.Utilities.Errors.ErrorSystems,System.Enum)">
            <summary>
            获取业务异常
            </summary>       
            <param name="sys">系统</param>
            <param name="err">错误枚举</param>
            <param name="msg">自定义消息</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.GetExceptionMessage(System.Exception,System.Int64,System.String)">
            <summary>
            取得错误记录信息
            </summary>
            <param name="ex">错误实例</param>
            <param name="errorCode">错误码</param>
            <param name="errorText">错误描述</param>
            <returns>错误消息</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.GetInnerException(System.Exception)">
            <summary>
            取得内部错误
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.GetException(WitsWay.Utilities.Exceptions.AppExceptionKinds,System.Int64,System.String)">
            <summary>
            获取异常
            </summary>
            <param name="exType">异常类型</param>
            <param name="errCode">错误码</param>
            <param name="errText">自定义错误描述信息</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.GetErrorDomain">
            <summary>
            获取错误域
            </summary>
            <returns>AppSetting中的错误域</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExceptionHelper.GetErrorTextWithParas(System.Enum,System.String[])">
            <summary>
            获取错误描述信息
            </summary>
            <param name="err">错误</param>
            <param name="paras">格式化参数</param>
            <returns>错误描述信息</returns>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.AppSettingHelper">
            <summary>
            Config文件操作
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.AppSettingHelper.GetValue(System.String)">
            <summary>
            根据Key取Value值
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.AppSettingHelper.GetValue``1(System.String)">
            <summary>
            根据Key取Value值
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="key">AppSetting键</param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.AppSettingHelper.SetValue(System.String,System.String,System.String)">
            <summary>
            根据Key修改Value
            </summary>
            <param name="key">要修改的Key</param>
            <param name="value">要修改为的值</param>
            <param name="xmlFileRelativePath">xml文件相对位置
            <para>例如：<![CDATA[Xml\\appSettings.config]]></para>
            </param>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.ComputerHelper">
            <summary>
            计算机等设备帮助类
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ComputerHelper.GetMacAddress">
            <summary>
            获取物理地址列表
            </summary>
            <returns>返回物理地址列表</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ComputerHelper.GetLocalAddress">
            <summary>
            获取本机IP地址
            </summary>
            <returns>本机IP地址</returns>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Helpers.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:WitsWay.Utilities.Helpers.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:WitsWay.Utilities.Helpers.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Helpers.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:WitsWay.Utilities.Helpers.MeansImplicitUseAttribute"/>
            or <see cref="T:WitsWay.Utilities.Helpers.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Helpers.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:WitsWay.Utilities.Helpers.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.EncryptDecryptHelper">
            <summary>
            加解密辅助类
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.EncryptDecryptHelper.EncryptDES(System.String,System.String)">
            <summary>
            DES加密字符串
            </summary>
            <param name="encryptString">待加密的字符串</param>
            <param name="encryptKey">加密密钥,要求为8位</param>
            <returns>加密成功返回加密后的字符串，失败返回源串</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.EncryptDecryptHelper.DecryptDES(System.String,System.String)">
            <summary>
            DES解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,要求为8位,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串，失败返源串</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.EncryptDecryptHelper.EncryptMD5(System.String)">
            <summary>
            MD5加密字符串
            </summary>
            <param name="encryptString">需要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.EncryptDecryptHelper.BytesToHex(System.Byte[])">
            <summary>
            Converts a byte array into its hexadecimal representation.
            </summary>
            <param name="data">The binary byte array.</param>
            <returns>The hexadecimal (uppercase) equivalent of the byte array.</returns>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.ExpressionHelper">
            <summary>
            表达式辅助类
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ExpressionHelper.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取属性名称
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.HashAlgorithmExtends">
            <summary>
            HashAlgorithm扩展
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.HashAlgorithmExtends.GetHashAlgorithm(WitsWay.Utilities.Enums.HashAlgorithmKinds)">
            <summary>
            获取HashAlgorithm实例
            </summary>
            <param name="hashKind"></param>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.HashAlgorithmHelper">
            <summary>
            HashAlgorithm帮助类
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.HashAlgorithmHelper.HashData(System.IO.Stream,WitsWay.Utilities.Enums.HashAlgorithmKinds)">
            <summary>
            计算哈希值
            </summary>
            <param name="stream">要计算哈希值的 Stream</param>
            <param name="hashKind">Hash算法类型</param>
            <returns>哈希值字节数组</returns>
            <exception cref="T:System.NotImplementedException">未实现“Hash算法类型”对应哈希算法</exception>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.HashAlgorithmHelper.ByteArrayToHexString(System.Byte[])">
            <summary> 
            字节数组转换为16进制表示的字符串
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.FileHelper">
            <summary>
            文件帮助类
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.FileHelper.FileCompare(System.String,System.String)">
            <summary>
            比较两个文件是否相同
            <para>通过CRC32/MD5/SHA1三种比较，防止哈希碰撞</para>
            </summary>
            <param name="file1"></param>
            <param name="file2"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.FileHelper.MD5Value(System.String)">
            <summary>
            文件MD5值
            </summary>
            <param name="fileName">文件名称</param>
            <returns>返回MD5值</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.FileHelper.SHA1Value(System.String)">
            <summary>
            文件哈希值
            </summary>
            <param name="fileName">文件名称</param>
            <returns>返回哈希值</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.FileHelper.CrcValue(System.String,WitsWay.Utilities.Enums.CrcAlgorithmKinds)">
            <summary>
            CRC校验值
            </summary>
            <param name="fileName">文件名</param>
            <param name="crcKind">CRC校验类型</param>
            <returns>校验值</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.FileHelper.HashFile(System.String,WitsWay.Utilities.Enums.HashAlgorithmKinds)">
            <summary>
            计算文件的哈希值
            </summary>
            <param name="fileName">要计算哈希值的文件名和路径</param>
            <param name="hashKind">Hash算法类型</param>
            <returns>哈希值16进制字符串</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.FileHelper.SaveFile(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            保存文件
            </summary>
            <param name="dstPath">目标路径eg:C:\Temp\a.txt</param>
            <param name="buffer">要保存的二进制流buffer</param>
            <param name="start">buffer的起始读取位</param>
            <param name="length">buffer的读取长度</param>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.JsonCreationConverter`1">
            <summary>
            Create a custom object
            </summary>
            <typeparam name="T">The object type to convert.</typeparam>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.JsonCreationConverter`1.Create(System.Type,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
            <param name="objectType">Type of the object.</param>
            <param name="jsonObject">json object</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.JsonCreationConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.JsonCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.JsonCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.JsonDeserializeHelper`1">
            <summary>
            Json格式对象反序列化帮助类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.JsonDeserializeHelper`1.Deserialize(System.String)">
            <summary>
            转换为实体
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.JsonDeserializeHelper`1.Serialize(`0)">
            <summary>
            转换为实体
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.JsonDeserializeHelper`1.Serialize(System.Collections.Generic.IList{`0})">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.PathCodeHelper">
            <summary>
            路径码辅助类
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.PathCodeHelper.GetPathCode(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            取得路径码
            </summary>
            <param name="compareCodes"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">compareCodes参数为空或Count为0时抛出</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">路径码超出最大值ZZ</exception>
            <exception cref="T:System.ArgumentException">路径码只能由A到Z大写字母组成</exception>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.PathCodeHelper.PathCodeAddOne(System.String)">
            <summary>
            路径码加1，加1后到超过全Z则返回全A
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.PinYinHelper">
            <summary>
            拼音助手
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.PinYinHelper.GetPinYinWithTone(System.Char)">
            <summary>
            返回单个简体中文字的拼音列表
            </summary>
            <param name="inputChar">简体中文单字</param>      
        </member>
        <member name="M:WitsWay.Utilities.Helpers.PinYinHelper.GetPinYinCount(System.Char)">
            <summary>
            返回单个简体中文字的拼音个数
            </summary>
            <param name="inputChar">简体中文单字</param>      
        </member>
        <member name="M:WitsWay.Utilities.Helpers.PinYinHelper.GetPinYin(System.String,WitsWay.Utilities.Helpers.PinYinMode,System.String)">
            <summary>
            获取拼音
            </summary>
            <param name="source">要获取拼音的文字</param>
            <param name="mode">获取模式</param>
            <param name="spliter">字之间的分隔符</param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.PinYinHelper.GetPinYinCombination(System.String,System.String,System.String)">
            <summary>
            获取词组所有可能的拼音组合
            </summary>
            <param name="source">要获取拼音的文字</param>
            <param name="singleWordSpliter">单个字之间的分隔符</param>
            <param name="wordTermSpliter">词字之间的分隔符</param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.PinYinHelper.Combinate(System.Collections.Generic.List{System.Collections.Generic.List{System.String}},System.String)">
            <summary>
            组合所有List元素
            </summary>
            <param name="input"></param>
            <param name="singleWordSpliter"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.PinYinHelper.GetAcronym(System.String)">
            <summary>
            获取首字母缩写词
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.PinYinMode">
            <summary>
            获取拼音的模式
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Helpers.PinYinMode.Simple">
            <summary>
            简单模式，返回不带声调的拼音，遇到多音字则返回第一条
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Helpers.PinYinMode.WithTone">
            <summary>
            返回带声调的拼音
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Helpers.PinYinMode.WithMultiplePronunciations">
            <summary>
            返回所有多音字的拼音
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Helpers.PinYinMode.WithToneAndMultiplePronunciations">
            <summary>
            返回所有多音字，并且带声调
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.SerilizeHelper">
            <summary>
            XML序列化辅助类
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.SerilizeHelper.JObjectParse(System.String)">
            <summary>
            解析为JObject
            <para>可后续使用JObject进行属性获取等其它操作</para>
            </summary>
            <param name="json">json字符串</param>
            <returns><see cref="T:Newtonsoft.Json.Linq.JObject"/>对象</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.SerilizeHelper.GetJObjectValue(System.String,System.String)">
            <summary>
            获得某个json对象下一层指定值
            </summary>
            <param name="json"></param>
            <param name="subJObjectValue"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.SerilizeHelper.DeserilizeJson``1(System.String)">
            <summary>
            转换为实体
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.SerilizeHelper.SerilizeToJson``1(``0)">
            <summary>
            转换为实体
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.SerilizeHelper.InitJsonSetting">
            <summary>
            初始化Json序列化设置
            </summary>
            <returns>Json序列化设置</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.SerilizeHelper.SerilizeToJson``1(System.Collections.Generic.IList{``0})">
            <summary>
            序列化为Json字符串
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.SerilizeHelper.SerilizeToXML``1(``0)">
            <summary>
            序列化为内存流MemoryStream
            </summary>
            <param name="objectToSerilize">要序列化的对象实例</param>
            <returns>内存流MemoryStream</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.SerilizeHelper.SerilizeToXML``1(``0,System.Text.Encoding)">
            <summary>
            序列化为内存流MemoryStream
            </summary>
            <param name="objectToSerilize">要序列化的对象实例</param>
            <param name="encoding">编码</param>
            <returns>内存流MemoryStream</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.SerilizeHelper.DeserilizeXML``1(System.String)">
            <summary>
            MemoryStream反序列化为对象
            </summary>
            <param name="input">输入流</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.SerilizeHelper.DeserilizeXML``1(System.String,System.Text.Encoding)">
            <summary>
            MemoryStream反序列化为对象
            </summary>
            <param name="encoding">编码</param>
            <param name="input">输入流</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.SerilizeHelper.SerilizeToFile``1(``0,System.String)">
            <summary>
            序列化到XML文件
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="objectToSerilize">要序列化的对象实例</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.SerilizeHelper.DeserilizeFile``1(System.String)">
            <summary>
            反序列化文件
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="fileName">反序列化要读取的文件名</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.SerilizeHelper.SerilizeToStreamBinary``1(``0)">
            <summary>
            BinaryFormatter序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="objectToSerilize">要序列化的对象实例</param>
            <returns>MemoryStream对象</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.SerilizeHelper.SerilizeToStreamBinary``1(``0,System.Text.Encoding)">
            <summary>
            BinaryFormatter序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="objectToSerilize">要序列化的对象实例</param>
            <param name="encoding">编码</param>
            <returns>MemoryStream对象</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.SerilizeHelper.SerilizeToBytes``1(``0)">
            <summary>
            序列化为byte数组
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="objectToSerilize">要序列化的对象实例</param>
            <returns>序列化后的byte数组</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.SerilizeHelper.DeserilizeFromBytes``1(System.Byte[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.SerilizeHelper.DeserilizeStreamBinary``1(System.String)">
            <summary>
            BinaryFormatter反序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="input">用于反序列化的MemoryStream流</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.SerilizeHelper.DeserilizeStreamBinary``1(System.String,System.Text.Encoding)">
            <summary>
            BinaryFormatter反序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="encoding">编码</param>
            <param name="input">用于反序列化的MemoryStream流</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.SerilizeHelper.StreamToString(System.IO.MemoryStream,System.Text.Encoding)">
            <summary>
            MemoryStream转换为String
            </summary>
            <param name="ms">需要转换的MemoryStream</param>
            <param name="encoding">编码</param>
            <returns>转换后的String</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.SerilizeHelper.StringToStream(System.String,System.Text.Encoding)">
            <summary>
            String转换为Stream
            </summary>
            <param name="s">要转换的String</param>
            <param name="encoding">编码</param>
            <returns>转换后的MemoryStream</returns>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.ShowCastHelper">
            <summary>
            显示转换辅助类
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ShowCastHelper.CastList``2(System.Collections.Generic.List{``0},System.Func{``0,``1})">
            <summary>
            转换列表
            </summary>
            <typeparam name="T1">要转换的类型</typeparam>
            <typeparam name="T2">转换后的类型</typeparam>
            <param name="datas">要转换的对象列表</param>
            <param name="aToB">转换方法委托</param>
            <returns>转换后的对象列表</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ShowCastHelper.CastPageResult``2(WitsWay.Utilities.Entitys.PageResult{``0},System.Func{``0,``1})">
            <summary>
            转换分页结果集
            </summary>
            <typeparam name="T1">要转换的类型</typeparam>
            <typeparam name="T2">转换后的类型</typeparam>
            <param name="page">要转换的结果集</param>
            <param name="aToB">转换方法委托</param>
            <returns>转换后的结果集</returns>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.TsqlHelper">
            <summary>
            TSQL辅助类
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.TsqlHelper.SerilizeListToXml``1(System.Collections.Generic.List{``0})">
            <summary>
            取得数据集合对应的Xml序列化结果
            <example>
            declare @xmldata XML
            set @xmldata=N'XML数据'
            SELECT T.c.query('RegionID').value('.[1]', 'int') as id,
            T.c.query('RegionName').value('.[1]', 'varchar(50)') as name,
            T.c.query('LevelType').value('.[1]', 'int') as company
            FROM @xmldata.nodes('/Root/Item') AS T(c)
            
            或者
            declare @xml int
            EXEC sp_xml_preparedocument @xml OUTPUT, @xmldoc
            SELECT *
            FROM  OPENXML (@hdoc, '/Root/Item',2)
            WITH (ResourceID int,
            ContractNo nvarchar(50),
            CurrentFlowID int,
            CreateTime datetimeoffset,
            ContractMoney decimal(10,4))
            
            exec sp_xml_removedocument @xml
            </example>
            <para>xml的编码格式均为UTF-16</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="datas"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.TsqlHelper.SerilizeObjectToXml``1(``0)">
            <summary>
            序列化对象到XML
            </summary>
            <typeparam name="T">序列化对象类型</typeparam>
            <param name="obj">要序列化得对象</param>
            <returns>序列化结果</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.TsqlHelper.AnalyseTsqlParameters(System.String)">
            <summary>
            解析TSQL语句参数
            </summary>
            <param name="tsqlString">TSQL语句字符串</param>
            <returns>返回参数列表</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.TsqlHelper.SqlTypeStringToDbType(System.String)">
            <summary>
            SQLType转换为对应的DbType
            </summary>
            <param name="sqlTypeWithPrecision">SQLType字符（包含长度信息）</param>
            <returns>返回DbType枚举</returns>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.TsqlHelper.SerilizeInfo`1">
            <summary>
            序列化使用类
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Helpers.TsqlHelper.SerilizeInfo`1.Infos">
            <summary>
            Infos
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.TsqlHelper.OnlyId`1">
            <summary>
            序列化使用类
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Helpers.TsqlHelper.OnlyId`1.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.EnumHelper">
            <summary>
            枚举辅助类
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.EnumHelper.GetEnumValueList``1">
            <summary>
            取得枚举值列表
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.EnumHelper.ParseEnum``1(System.String)">
            <summary>
            转换为枚举
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.EnumHelper.ParseEnum``1(System.Int32)">
            <summary>
            转换为枚举
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.CollectionHelper">
            <summary>
            集合辅助类
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.CollectionHelper.CastListToDictionary``2(System.Collections.Generic.IList{``1},System.Func{``1,``0})">
            <summary>
            转换列表为字典
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="datas">数据列表</param>
            <param name="idFunc">返回对应数据的键</param>
            <returns>转换后的字典</returns>
        </member>
        <member name="T:WitsWay.Utilities.Helpers.ZipHelper">
            <summary>
            使用SharpZipLib来完成打包解包
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ZipHelper.Pack(System.String,System.String)">
            <summary>
            打包
            </summary>
            <param name="zipFileName">输出压缩文件名称</param>
            <param name="sourceFolderName">需要压缩的文件夹名称</param>
            <returns>成功true,失败false</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ZipHelper.Unpack(System.String,System.String)">
            <summary>
            解包
            </summary>
            <param name="zipFileName">压缩文件名称</param>
            <param name="targetFolderName">解压缩的目标文件夹名称</param>
            <returns>成功true,失败false</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ZipHelper.CreateZipComponent">
            <summary>
            创建
            </summary>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ZipHelper.ZipFileWithPassword(System.String,System.String,System.String)">
            <summary>
            压缩文件(附带密码)
            </summary>
            <param name="inputFileName">待压缩的文件名称</param>
            <param name="outZipFileName">压缩后的文件名称</param>
            <param name="password">压缩密码</param>
            <returns>成功返回True</returns>
        </member>
        <member name="M:WitsWay.Utilities.Helpers.ZipHelper.UnZipFileWithPassword(System.String,System.String,System.String)">
            <summary>
            解压文件(附带密码)
            </summary>
            <param name="zipFileName">压缩文件名称</param>
            <param name="unZipFileName">解压后文件名</param>
            <param name="password">密码</param>
            <returns>成功返回true</returns>
        </member>
        <member name="T:WitsWay.Utilities.Errors.ErrorDomains">
            <summary>
            错误域
            <para>包含错误范围、子模块、领域模型定义</para>
            <para>相当于错误信息的最后一层分组</para>
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorDomains.Utility">
            <summary>
            通用错误
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorDomains.ShareCache">
            <summary>
            共享缓存
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorDomains.Services">
            <summary>
            服务
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorDomains.CacheMirror">
            <summary>
            缓存镜像
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorDomains.BaseRegion">
            <summary>
            地区信息
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorDomains.LibBaseGroup">
            <summary>
            基础组
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorDomains.LibStorageUnitBill">
            <summary>
            库存件领料单
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorDomains.Customer">
            <summary>
            客户信息
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorDomains.PreOrder">
            <summary>
            订单信息
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorDomains.SignOrder">
            <summary>
            签到信息
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorDomains.ConfigItem">
            <summary>
            配置项
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorDomains.GroupInfo">
            <summary>
            分组信息
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorDomains.DiskManage">
            <summary>
            磁盘信息
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorDomains.ModulePage">
            <summary>
            菜单
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorDomains.WidgetDesktop">
            <summary>
            组件桌面
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorDomains.PresentItem">
            <summary>
            呈现项
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Errors.ErrorSystems">
            <summary>
            错误域枚举
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.AppComponent">
            <summary>
            公共组件
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.BusinessLogic">
            <summary>
            业务逻辑层
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.ShopPlatform">
            <summary>
            门店平台
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.CasePlatform">
            <summary>
            案例展示平台
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.WebManagePlatform">
            <summary>
            网站管理平台
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.ABM">
            <summary>
            基础管理平台（Win）
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.CRM">
            <summary>
            客户关系管理
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.BOM">
            <summary>
            料单解析
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.OrderPlatform">
            <summary>
            订单管理平台
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.MES">
            <summary>
            制造执行系统
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.PriceSystem">
            <summary>
            价格体系
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.ProductSystem">
            <summary>
            产品体系
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.SCM">
            <summary>
            供应链管理
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.ShareCache">
            <summary>
            共享缓存
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.ShareUpdate">
            <summary>
            自动更新
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.ShareTask">
            <summary>
            任务管理系统
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.ShareReport">
            <summary>
            报表系统
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.BusServer">
            <summary>
            业务总线服务器
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.LoadServer">
            <summary>
            通讯服务器
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.PackageSystem">
            <summary>
            包装系统
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.ProcessSystem">
            <summary>
            加工工位系统
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorSystems.WMS">
            <summary>
            库房管理系统（Warehouse Management System）
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Errors.ErrorItemAttribute">
            <summary>
            把枚举值按照指定的文本显示
            <example>
            EnumField.GetEnumText(typeof(MyEnum));
            EnumField.GetFieldText(MyEnum.EnumField);
            EnumField.GetFieldInfos(typeof(MyEnum));  
            </example>
            </summary>
            <summary>
            把枚举值按照指定的文本显示
            <example>
            EnumField.GetEnumText(typeof(MyEnum));
            EnumField.GetFieldText(MyEnum.EnumField);
            EnumField.GetFieldInfos(typeof(MyEnum));  
            </example>
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Errors.ErrorItemAttribute.#ctor(System.String)">
            <summary>
            描述枚举值
            </summary>
            <param name="enumText">描述内容</param>
        </member>
        <member name="P:WitsWay.Utilities.Errors.ErrorItemAttribute.ErrorText">
            <summary>
            错误文字
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Errors.ErrorItemAttribute.ErrorValue">
            <summary>
            枚举值(对应枚举值）
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Errors.ErrorItemAttribute.FieldName">
            <summary>
            字段名称（对应代码中的枚举实现）
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Errors.ErrorItemAttribute.ToString">
            <summary>
             重写ToString
            </summary>
            <returns>EnumDisplayText</returns>
        </member>
        <member name="M:WitsWay.Utilities.Errors.ErrorItemAttribute.GetEnumText(System.Type)">
            <summary>
            得到对枚举的描述文本
            </summary>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Errors.ErrorItemAttribute.GetFieldText(System.Object)">
            <summary>
            获得指定枚举类型中，指定值的描述文本。
            </summary>
            <param name="enumValue">枚举值，不要作任何类型转换</param>
            <returns>描述字符串</returns>
        </member>
        <member name="M:WitsWay.Utilities.Errors.ErrorItemAttribute.GetFieldInfo(System.Object)">
            <summary>
            获得指定枚举类型中，指定值的描述文本。
            </summary>
            <param name="enumValue">枚举值，不要作任何类型转换</param>
            <returns>描述字符串</returns>
        </member>
        <member name="M:WitsWay.Utilities.Errors.ErrorItemAttribute.GetFieldInfos(System.Type)">
            <summary>
            得到枚举类型定义的所有文本
            </summary>
            <exception cref="T:System.NotSupportedException"></exception>
            <param name="enumType">枚举类型</param>
        </member>
        <member name="T:WitsWay.Utilities.Errors.ErrorItemExtends">
            <summary>
            错误信息工厂
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Errors.ErrorItemExtends.GetErrorCode(System.Enum,WitsWay.Utilities.Errors.ErrorSystems)">
            <summary>
            取错误码
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Errors.ErrorItemExtends.GetErrorText(System.Enum)">
            <summary>
            取错误描述
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Errors.ErrorItemFactory">
            <summary>
            错误信息工厂
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.ErrorItemFactory.Errors">
            <summary>
            所有错误
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Errors.ErrorItemFactory.GetErrorCode(WitsWay.Utilities.Errors.ErrorSystems,System.Enum)">
            <summary>
            取错误码
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Errors.ErrorItemFactory.GetErrorText(System.Enum)">
            <summary>
            取错误描述
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Errors.ErrorDomainAttribute">
            <summary>
            错误域 特性
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Errors.ErrorDomainAttribute.#ctor(WitsWay.Utilities.Errors.ErrorDomains)">
            <summary>
            描述枚举值
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Errors.ErrorDomainAttribute.Domain">
            <summary>
            错误域
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Errors.ErrorDomainAttribute.DomainText">
            <summary>
            错误域名称
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Errors.ErrorDomainAttribute.ToString">
            <summary>
             重写ToString
            </summary>
            <returns>EnumDisplayText</returns>
        </member>
        <member name="T:WitsWay.Utilities.Errors.UtilityErrors">
            <summary>
            通用错误
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.UnHandleProgramError">
            <summary>
            未处理程序异常
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.InternalProgramError">
            <summary>
            内部程序错误
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.ProgramNotImplement">
            <summary>
            程序未实现。
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.TypeIsAssignableException">
            <summary>
            类型不是从指定类型继承
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.TypeInstanceException">
            <summary>
            类型实例化错误
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.AssemblyLoadError">
            <summary>
            程序集加载错误。
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.ObjectSerilizeError">
            <summary>
            对象序列化错误
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.ObjectDeserilizeError">
            <summary>
            对象反序列化错误
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.ProgramBatchNotHandleError">
            <summary>
            未考虑到程序分支。
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.ArgumentNullException">
            <summary>
            参数为空
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.ArgumentErrorException">
            <summary>
            参数错误
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.DatabaseAccessError">
            <summary>
            数据库访问错误
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.FileOrDirectoryOrStreamAccessError">
            <summary>
            文件、目录或流访问错误
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.MsmqQueueAccessError">
            <summary>
            消息队列访问错误
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.DatabaseInitDataError">
            <summary>
            数据库初始化数据错误
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.DatabaseDataError">
            <summary>
            数据库数据错误（废弃）
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.ServiceAccessError">
            <summary>
            服务访问错误。
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.ServiceProgramError">
            <summary>
            服务内部程序错误。
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.ServerWaitTimeoutError">
            <summary>
            服务等待超时。
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.ConfigFileErrorServerIpNotIp">
            <summary>
            configuration→appSettings→serverHost不是有效的IP地址。
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.ConfigFileErrorServerPortNotPort">
            <summary>
            configuration→appSettings→serverPort不是有效的端口值。
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.BaseCommunicationSubServerNotFound">
            <summary>
            子服务器通讯信息未找到或者已经删除。
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.ErpValidationDataInputError">
            <summary>
            输入数据不符合数据约束
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.ErpValidationDataLogicError">
            <summary>
            输入数据不符合业务逻辑约束
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.NotExistSubSystem">
            <summary>
            ERP中不存在对应的子系统
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.SequenceNoOverMaxValue">
            <summary>
            序列已达到上限。
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.SequenceNotImplement">
            <summary>
            支持序列还未实现。
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.PathCodeFormatError">
            <summary>
            路径码格式错误。
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.SystemGlobalDataHaveChanged">
            <summary>
            系统全局数据已经变更。
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.NotAllowMoveDown">
            <summary>
            区域内已排在最后一位，不能向下移动。
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.NotAllowMoveUp">
            <summary>
            区域内已排在第一位，不能向上移动。
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.DaoDllFileNotExist">
            <summary>
            数据实现DLL文件{0}不存在
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.DaoDllFileLoadFail">
            <summary>
            数据实现DLL文件{0}载入失败
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.DaoCreateError">
            <summary>
            数据访问对象创建失败
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.DaoCreateErrorFormat">
            <summary>
            数据访问对象{0}创建失败
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.DaoNotExist">
            <summary>
            不存在对应接口{0}的数据访问对象
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.FillKeyDuplicated">
            <summary>
            数据填充键“{0}（{1}）”重复
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.FillTargetDuplicated">
            <summary>
            数据填充目标“{0}（{1}）”重复
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.FillTargetMissingKey">
            <summary>
            数据填充目标“{0}（{1}）”无对应的填充键
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.FillKeyMissingTarget">
            <summary>
            数据填充键“{0}（{1}）”无对应的填充目标
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.FillAttachParaLess">
            <summary>
            缺少附加参数
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.FillAttachParaTypeError">
            <summary>
            附加参数类型错误
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.AppConfigAppSettingsMiss">
            <summary>
            程序配置文件中appSettings中缺少配置{0}
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.NoDataWithId">
            <summary>
            不存在对应Id：{0}的{1}数据
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.StatesInStatesContainsZero">
            <summary>
            筛选状态包含“0”
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.CustomValidatorDllFileLoadFail">
            <summary>
            自定义验证器程序集{0}载入失败
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.CustomValidatorHaveDuplicateKey">
            <summary>
            自定义验证器有重复的键{0}
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.NotExistCustomValidatorWithKey">
            <summary>
            不存在主键为{0}的自定义验证器
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.NoRightToLogin">
            <summary>
            无权登录{0}
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.NotSupportParseProvider">
            <summary>
            不支持解析提供器“{0}”"
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.LoginSubSystemConfigNotExist">
            <summary>
            登录系统『{0}』系统配置信息不存在
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.UserWithKeyNotExist">
            <summary>
            用户『{0}』不存在
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.ResourceRequestFail">
            <summary>
            资源『{0}』请求失败
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.AppConfigAppSettingError">
            <summary>
            程序配置文件中appSettings中配置{0}获取失败
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Errors.UtilityErrors.ObjectCastError">
            <summary>
            对象转换错误：{0}
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Exceptions.ApiExceptionDetail">
            <summary>
            异常明细
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Exceptions.ApiExceptionDetail.ExceptionType">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Exceptions.ApiExceptionDetail.ExceptionCode">
            <summary>
            异常码
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Exceptions.ApiExceptionDetail.ExceptionMessage">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Exceptions.ApiExceptionDetail.StatusCode">
            <summary>
            Http状态码
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Exceptions.AppMessageException">
            <summary>
            应用程序消息异常类，封装了错误码和错误描述，是应用程序将异常通知最高层的统一类.
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Exceptions.AppMessageException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Exceptions.AppMessageException.#ctor(System.Int64,System.String)">
            <summary>
            由指定错误码和描述构造应用程序消息异常
            </summary>
            <param name="errorCode">错误码</param>
            <param name="errorDescription">错误描述</param>
        </member>
        <member name="M:WitsWay.Utilities.Exceptions.AppMessageException.#ctor(System.Int64,System.String,System.String)">
            <summary>
            由指定错误码、描述和操作帮助构造应用程序消息异常
            </summary>
            <param name="errorCode">错误码</param>
            <param name="errorDescription">错误描述</param>
            <param name="operationHelp">操作帮助</param>
        </member>
        <member name="P:WitsWay.Utilities.Exceptions.AppMessageException.ErrorCode">
            <summary>
            获取错误码
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Exceptions.AppMessageException._exceptionType">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Exceptions.AppMessageException.ExceptionType">
            <summary>
            获取或者设置异常类型
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Exceptions.AppMessageException.ErrorDescription">
            <summary>
            获取错误描述
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Exceptions.AppMessageException.OperationHelp">
            <summary>
            操作帮助
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Exceptions.AppMessageException.SystemCode">
            <summary>
            获取或者设置系统码
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Exceptions.AppMessageException.Message">
            <summary>
            由错误码和错误描述、操作帮助组成的提示消息串
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Exceptions.AppBusinessException">
            <summary>
            业务异常
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Exceptions.AppBusinessException.#ctor(System.Int64,System.String)">
            <summary>
            由指定错误码和描述构造应用程序消息异常
            </summary>
            <param name="errorCode">错误码</param>
            <param name="errorDescription">错误描述</param>
        </member>
        <member name="M:WitsWay.Utilities.Exceptions.AppBusinessException.#ctor(System.Int64,System.String,System.String)">
            <summary>
            由指定错误码、描述和操作帮助构造应用程序消息异常
            </summary>
            <param name="errorCode">错误码</param>
            <param name="errorDescription">错误描述</param>
            <param name="operationHelp">操作帮助</param>
        </member>
        <member name="T:WitsWay.Utilities.Exceptions.AppExceptionDetail">
            <summary>
            异常明细
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Exceptions.AppExceptionDetail._exceptionType">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Exceptions.AppExceptionDetail.ExceptionType">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Exceptions.AppExceptionDetail._exceptionCode">
            <summary>
            异常码
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Exceptions.AppExceptionDetail.ExceptionCode">
            <summary>
            异常码
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Exceptions.AppExceptionDetail._exceptionMessage">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Exceptions.AppExceptionDetail.ExceptionMessage">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Exceptions.AppExceptionKinds">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Exceptions.AppExceptionKinds.BusinessException">
            <summary>
            业务异常
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Exceptions.AppExceptionKinds.ProgramException">
            <summary>
            程序异常
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Exceptions.AppProgramException">
            <summary>
            程序异常
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Exceptions.AppProgramException.#ctor(System.Int64,System.String)">
            <summary>
            由指定错误码和描述构造应用程序消息异常
            </summary>
            <param name="errorCode">错误码</param>
            <param name="errorDescription">错误描述</param>
        </member>
        <member name="M:WitsWay.Utilities.Exceptions.AppProgramException.#ctor(System.Int64,System.String,System.String)">
            <summary>
            由指定错误码、描述和操作帮助构造应用程序消息异常
            </summary>
            <param name="errorCode">错误码</param>
            <param name="errorDescription">错误描述</param>
            <param name="operationHelp">操作帮助</param>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.Cache.ConstructorInvokerCache">
            <summary>
            ConstructorInvoker缓存
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Cache.ConstructorInvokerCache.Create(System.Reflection.ConstructorInfo)">
            <summary>
            创建IConstructorInvoker接口实例
            </summary>
            <param name="key">ConstructorInfo</param>
            <returns>IConstructorInvoker接口实例</returns>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.Cache.FastReflectionCache`2">
            <summary>
            FastReflectionCache 缓存基类
            </summary>
            <typeparam name="TKey">MethodInfo、ConstructorInfo、PropertyInfo、 FieldInfo</typeparam>
            <typeparam name="TValue">Invoker 或 Accessor对象</typeparam>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Cache.FastReflectionCache`2.Get(`0)">
            <summary>
            获取缓存的Invoker 或 Accessor对象
            </summary>
            <param name="key">MethodInfo、ConstructorInfo、PropertyInfo、 FieldInfo</param>
            <returns>Invoker 或 Accessor对象</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Cache.FastReflectionCache`2.Create(`0)">
            <summary>
            执行真正的 Invoker 或 Accessor对象创建
            需在子类中实现具体创建逻辑
            </summary>
            <param name="key">MethodInfo、ConstructorInfo、PropertyInfo、 FieldInfo</param>
            <returns> Invoker 或 Accessor对象</returns>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.Cache.FastReflectionCaches">
            <summary>
            快速反射 缓存集合
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.FastReflection.Cache.FastReflectionCaches.MethodInvokerCache">
            <summary>
            MethodInvoker缓存
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.FastReflection.Cache.FastReflectionCaches.PropertyAccessorCache">
            <summary>
            PropertyAccessor缓存
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.FastReflection.Cache.FastReflectionCaches.FieldAccessorCache">
            <summary>
            FieldAccessor缓存
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.FastReflection.Cache.FastReflectionCaches.ConstructorInvokerCache">
            <summary>
            ConstructorInvoker缓存
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.Cache.FieldAccessorCache">
            <summary>
            字段存取器缓存
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Cache.FieldAccessorCache.Create(System.Reflection.FieldInfo)">
            <summary>
            创建IFieldAccessor接口实例
            </summary>
            <param name="key">FieldInfo</param>
            <returns>IFieldAccessor接口实例</returns>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.Cache.IFastReflectionCache`2">
            <summary>
            快速反射缓存 泛型接口
            </summary>
            <typeparam name="TKey">元数据信息</typeparam>
            <typeparam name="TValue">对应存取器</typeparam>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Cache.IFastReflectionCache`2.Get(`0)">
            <summary>
            获取缓存的Invoker 或 Accessor对象
            </summary>
            <param name="key">MethodInfo、ConstructorInfo、PropertyInfo、 FieldInfo</param>
            <returns>Invoker 或 Accessor对象</returns>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.Cache.MethodInvokerCache">
            <summary>
            方法Invoker缓存
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Cache.MethodInvokerCache.Create(System.Reflection.MethodInfo)">
            <summary>
            创建IMethodInvoker接口实例
            </summary>
            <param name="key">MethodInfo</param>
            <returns>IMethodInvoker接口实例</returns>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.Cache.PropertyAccessorCache">
            <summary>
            属性存取器缓存
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Cache.PropertyAccessorCache.Create(System.Reflection.PropertyInfo)">
            <summary>
            创建IPropertyAccessor接口实例
            </summary>
            <param name="key">PropertyInfo</param>
            <returns>IPropertyAccessor接口实例</returns>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.Constructor.IConstructorInvoker">
            <summary>
            构造函数Invoker接口
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Constructor.IConstructorInvoker.Invoke(System.Object[])">
            <summary>
            Invoke方法
            </summary>
            <param name="parameters">方法参数列表</param>
            <returns>方法执行结果</returns>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.Constructor.ConstructorInvoker">
            <summary>
            构造函数Invoker
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.FastReflection.Constructor.ConstructorInvoker.ConstructorInfo">
            <summary>
            构造函数信息
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Constructor.ConstructorInvoker.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            构造函数Invoker
            </summary>
            <param name="constructorInfo">构造函数信息</param>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Constructor.ConstructorInvoker.InitializeInvoker(System.Reflection.ConstructorInfo)">
            <summary>
            动态委托创建
            <remarks>
            <![CDATA[
            签名：(object)new T((T0)parameters[0], (T1)parameters[1], ...)
            ]]>
            </remarks>
            </summary>
            <param name="constructorInfo">构造函数信息</param>
            <returns>委托实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Constructor.ConstructorInvoker.Invoke(System.Object[])">
            <summary>
            通过构造函数信息 反射创建对象
            </summary>
            <param name="parameters">参数列表</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Constructor.ConstructorInvoker.WitsWay#Utilities#FastReflection#Constructor#IConstructorInvoker#Invoke(System.Object[])">
            <summary>
            通过构造函数信息 反射创建对象
            </summary>
            <param name="parameters">参数列表</param>
            <returns>对象实例</returns>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.Constructor.ConstructorInvokerFactory">
            <summary>
            构造函数Invoker工厂
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Constructor.ConstructorInvokerFactory.Create(System.Reflection.ConstructorInfo)">
            <summary>
            创建IConstructorInvoker实例
            </summary>
            <param name="key">构造函数信息</param>
            <returns>IConstructorInvoker实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Constructor.ConstructorInvokerFactory.WitsWay#Utilities#FastReflection#Factory#IFastReflectionFactory{System#Reflection#ConstructorInfo,WitsWay#Utilities#FastReflection#Constructor#IConstructorInvoker}#Create(System.Reflection.ConstructorInfo)">
            <summary>
            创建IConstructorInvoker实例
            </summary>
            <param name="key">构造函数信息</param>
            <returns>IConstructorInvoker实例</returns>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.FastReflectionExtensions">
            <summary>
            快速反射扩展方法
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.FastReflectionExtensions.FastInvoke``1(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            方法Invoke执行
            </summary>
            <param name="methodInfo">反射方法信息</param>
            <param name="instance">对象实例</param>
            <param name="parameters">参数列表</param>
            <returns>方法执行结果</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.FastReflectionExtensions.FastInvoke(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            方法Invoke执行
            </summary>
            <param name="methodInfo">反射方法信息</param>
            <param name="instance">对象实例</param>
            <param name="parameters">参数列表</param>
            <returns>方法执行结果</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.FastReflectionExtensions.FastInvoke``1(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            构造函数反射调用
            </summary>
            <param name="constructorInfo">反射构造函数信息</param>
            <param name="parameters">参数列表</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.FastReflectionExtensions.FastInvoke(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            构造函数反射调用
            </summary>
            <param name="constructorInfo">反射构造函数信息</param>
            <param name="parameters">参数列表</param>
            <returns>对象实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.FastReflectionExtensions.FastGetValue``1(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            通过反射获取属性值
            </summary>
            <param name="propertyInfo">反射属性信息</param>
            <param name="instance">对象实例</param>
            <returns>属性值</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.FastReflectionExtensions.FastGetValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            通过反射获取属性值
            </summary>
            <param name="propertyInfo">反射属性信息</param>
            <param name="instance">对象实例</param>
            <returns>属性值</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.FastReflectionExtensions.FastSetValue(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            通过反射设置值
            </summary>
            <param name="propertyInfo">反射属性信息</param>
            <param name="instance">对象实例</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.FastReflectionExtensions.FastGetValue``1(System.Reflection.FieldInfo,System.Object)">
            <summary>
            通过反射获取字段值
            </summary>
            <param name="fieldInfo">反射字段信息</param>
            <param name="instance">对象实例</param>
            <returns>字段值</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.FastReflectionExtensions.FastGetValue(System.Reflection.FieldInfo,System.Object)">
            <summary>
            通过反射获取字段值
            </summary>
            <param name="fieldInfo">反射字段信息</param>
            <param name="instance">对象实例</param>
            <returns>字段值</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.FastReflectionExtensions.FastSetValue(System.Reflection.FieldInfo,System.Object,System.Object)">
            <summary>
            通过反射设置字段值
            </summary>
            <param name="fieldInfo">反射字段信息</param>
            <param name="instance">对象实例</param>
            <param name="value">要设置的值</param>
            <returns>字段值</returns>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.Factory.FastReflectionFactories">
            <summary>
            快速反射工厂 集合
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.FastReflection.Factory.FastReflectionFactories.MethodInvokerFactory">
            <summary>
            MethodInvoker工厂接口实例
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.FastReflection.Factory.FastReflectionFactories.ConstructorInvokerFactory">
            <summary>
            ConstructorInvoker工厂接口实例
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.FastReflection.Factory.FastReflectionFactories.PropertyAccessorFactory">
            <summary>
            PropertyAccessor工厂接口实例
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.FastReflection.Factory.FastReflectionFactories.FieldAccessorFactory">
            <summary>
            FieldAccessor工厂接口实例
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.Factory.IFastReflectionFactory`2">
            <summary>
            快速反射工厂 泛型接口
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Factory.IFastReflectionFactory`2.Create(`0)">
            <summary>
            创建对应的 Invoker 或 Accessor对象
            </summary>
            <param name="key">MethodInfo、ConstructorInfo、PropertyInfo、 FieldInfo</param>
            <returns>Invoker 或 Accessor对象</returns>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.Field.IFieldAccessor">
            <summary>
            字段访问器接口
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Field.IFieldAccessor.GetValue(System.Object)">
            <summary>
            获取字段值
            </summary>
            <param name="instance">对象实例</param>
            <returns>对应字段的值</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Field.IFieldAccessor.SetValue(System.Object,System.Object)">
            <summary>
            设置字段值
            </summary>
            <param name="instance">对象实例</param>
            <param name="value">要给对应字段赋予的值</param>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.Field.FieldAccessor">
            <summary>
            字段访问器
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.FastReflection.Field.FieldAccessor.FieldInfo">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Field.FieldAccessor.#ctor(System.Reflection.FieldInfo)">
            <summary>
            字段访问器
            </summary>
            <param name="fieldInfo">字段信息</param>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Field.FieldAccessor.GetDelegate(System.Reflection.FieldInfo)">
            <summary>
            动态委托创建
            <remarks>
            <![CDATA[
            签名：(object)(((TInstance)instance).Field)
            ]]>
            </remarks>
            </summary>
            <param name="fieldInfo">字段信息</param>
            <returns>获取字段值 委托方法</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Field.FieldAccessor.GetValue(System.Object)">
            <summary>
            IFieldAccessor接口实现
            </summary>
            <param name="instance">对象实例</param>
            <returns>属性值</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Field.FieldAccessor.SetValue(System.Object,System.Object)">
            <summary>
            IFieldAccessor接口实现
            </summary>
            <param name="instance">对象实例</param>
            <param name="value">字段值</param>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Field.FieldAccessor.WitsWay#Utilities#FastReflection#Field#IFieldAccessor#GetValue(System.Object)">
            <summary>
            IFieldAccessor接口实现
            </summary>
            <param name="instance">对象实例</param>
            <returns>属性值</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Field.FieldAccessor.WitsWay#Utilities#FastReflection#Field#IFieldAccessor#SetValue(System.Object,System.Object)">
            <summary>
            IFieldAccessor接口显式实现
            </summary>
            <param name="instance">对象实例</param>
            <param name="value">字段值</param>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.Field.FieldAccessorFactory">
            <summary>
            字段存取器工厂
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Field.FieldAccessorFactory.Create(System.Reflection.FieldInfo)">
            <summary>
            创建字段访问器 接口实现
            </summary>
            <param name="key">字段信息</param>
            <returns>字段访问器实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Field.FieldAccessorFactory.WitsWay#Utilities#FastReflection#Factory#IFastReflectionFactory{System#Reflection#FieldInfo,WitsWay#Utilities#FastReflection#Field#IFieldAccessor}#Create(System.Reflection.FieldInfo)">
            <summary>
            创建字段访问器 接口显示实现
            </summary>
            <param name="key">字段信息</param>
            <returns>字段访问器实例</returns>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.Method.IMethodInvoker">
            <summary>
            方法Invoker接口
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Method.IMethodInvoker.Invoke(System.Object,System.Object[])">
            <summary>
            通过反射执行方法
            </summary>
            <param name="instance">对象实例</param>
            <param name="parameters">方法参数</param>
            <returns>执行结果</returns>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.Method.MethodInvoker">
            <summary>
            方法Invoker
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.FastReflection.Method.MethodInvoker.MethodInfo">
            <summary>
            方法信息
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Method.MethodInvoker.#ctor(System.Reflection.MethodInfo)">
            <summary>
            方法Invoker
            </summary>
            <param name="methodInfo">方法信息</param>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Method.MethodInvoker.CreateInvokeDelegate(System.Reflection.MethodInfo)">
            <summary>
            动态委托创建
            <remarks>
            <![CDATA[
            签名：((TInstance)instance).Method((T0)parameters[0], (T1)parameters[1], ...)
            ]]>
            </remarks>
            </summary>
            <param name="methodInfo">方法信息</param>
            <returns>方法调用 动态委托实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Method.MethodInvoker.Invoke(System.Object,System.Object[])">
            <summary>
            反射执行方法调用
            </summary>
            <param name="instance">对象实例</param>
            <param name="parameters">参数列表</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Method.MethodInvoker.WitsWay#Utilities#FastReflection#Method#IMethodInvoker#Invoke(System.Object,System.Object[])">
            <summary>
            反射执行方法调用
            </summary>
            <param name="instance">对象实例</param>
            <param name="parameters">参数列表</param>
            <returns>执行结果</returns>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.Method.MethodInvokerFactory">
            <summary>
            方法Invoker工厂
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Method.MethodInvokerFactory.Create(System.Reflection.MethodInfo)">
            <summary>
            创建IMethodInvoker接口实例
            </summary>
            <param name="key">方法信息</param>
            <returns>IMethodInvoker接口实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Method.MethodInvokerFactory.WitsWay#Utilities#FastReflection#Factory#IFastReflectionFactory{System#Reflection#MethodInfo,WitsWay#Utilities#FastReflection#Method#IMethodInvoker}#Create(System.Reflection.MethodInfo)">
            <summary>
            创建IMethodInvoker接口实例
            </summary>
            <param name="key">方法信息</param>
            <returns>IMethodInvoker接口实例</returns>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.Property.IPropertyAccessor">
            <summary>
            属性存取器接口
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Property.IPropertyAccessor.GetValue(System.Object)">
            <summary>
            获取属性值
            </summary>
            <param name="instance">对象实例</param>
            <returns>对应属性的值</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Property.IPropertyAccessor.SetValue(System.Object,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="instance">对象实例</param>
            <param name="value">要给对应属性赋予的值</param>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.Property.PropertyAccessor">
            <summary>
            属性存取器
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.FastReflection.Property.PropertyAccessor.PropertyInfo">
            <summary>
            反射属性信息
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Property.PropertyAccessor.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            属性存取器
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Property.PropertyAccessor.InitializeGet(System.Reflection.PropertyInfo)">
            <summary>
            构件Get委托方法
            <remarks>
            <![CDATA[
            签名：(object)(((TInstance)instance).Property)
            ]]>
            </remarks>
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Property.PropertyAccessor.InitializeSet(System.Reflection.PropertyInfo)">
            <summary>
            构件Set委托方法
            </summary>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Property.PropertyAccessor.GetValue(System.Object)">
            <summary>
            获取属性值
            </summary>
            <param name="o">对象实例</param>
            <returns>属性值</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Property.PropertyAccessor.SetValue(System.Object,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="o">对象实例</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Property.PropertyAccessor.WitsWay#Utilities#FastReflection#Property#IPropertyAccessor#GetValue(System.Object)">
            <summary>
            获取属性值
            </summary>
            <param name="instance"></param>
            <returns>属性值</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Property.PropertyAccessor.WitsWay#Utilities#FastReflection#Property#IPropertyAccessor#SetValue(System.Object,System.Object)">
            <summary>
            设置属性值
            </summary>
            <param name="instance">对象实例</param>
            <param name="value">属性值</param>
        </member>
        <member name="T:WitsWay.Utilities.FastReflection.Property.PropertyAccessorFactory">
            <summary>
            属性存取器工厂
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Property.PropertyAccessorFactory.Create(System.Reflection.PropertyInfo)">
            <summary>
            创建IPropertyAccessor实例
            </summary>
            <param name="key">属性信息</param>
            <returns>IPropertyAccessor实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.FastReflection.Property.PropertyAccessorFactory.WitsWay#Utilities#FastReflection#Factory#IFastReflectionFactory{System#Reflection#PropertyInfo,WitsWay#Utilities#FastReflection#Property#IPropertyAccessor}#Create(System.Reflection.PropertyInfo)">
            <summary>
            创建IPropertyAccessor实例
            </summary>
            <param name="key">属性信息</param>
            <returns>IPropertyAccessor实例</returns>
        </member>
        <member name="T:WitsWay.Utilities.Fills.FillKeyAttribute">
            <summary>
            填充主键
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Fills.FillKeyAttribute.Kind">
            <summary>
            填充类型
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Fills.FillKeyAttribute.Group">
            <summary>
            填充组，当出现相同类型多个填充属性时需要设置组
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Fills.FillKeyAttribute.Paras">
            <summary>
            附加参数列表
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Fills.FillKeyAttribute.#ctor(WitsWay.Utilities.Fills.FillKind)">
            <summary>
            填充主键
            </summary>
            <param name="kind">填充类型</param>
        </member>
        <member name="M:WitsWay.Utilities.Fills.FillKeyAttribute.#ctor(WitsWay.Utilities.Fills.FillKind,System.Int32,System.Object[])">
            <summary>
            填充主键
            </summary>
            <param name="kind">填充类型</param>
            <param name="group">填充组，当出现相同类型多个填充属性时需要设置组</param>
            <param name="paras">附加参数</param>
        </member>
        <member name="T:WitsWay.Utilities.Fills.FillKind">
            <summary>
            填充数据类型
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Fills.FillKind.EmployeeName">
            <summary>
            人员名称
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Fills.FillKind.EmployeeNames">
            <summary>
            人员名称组，逗号分隔
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Fills.FillKind.GroupName">
            <summary>
            组名
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Fills.FillKind.GroupCode">
            <summary>
            组编码
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Fills.FillKind.ProvenceName">
            <summary>
            省名称
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Fills.FillKind.CityName">
            <summary>
            城市名称
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Fills.FillKind.RegionName">
            <summary>
            地区名称
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Fills.FillKind.MenuModuleName">
            <summary>
            菜单模块名称
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Fills.FillTargetAttribute">
            <summary>
            填充目标特性
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Fills.FillTargetAttribute.Kind">
            <summary>
            填充类型
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Fills.FillTargetAttribute.Group">
            <summary>
            填充组
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Fills.FillTargetAttribute.#ctor(WitsWay.Utilities.Fills.FillKind)">
            <summary>
            填充目标特性
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Fills.FillTargetAttribute.#ctor(WitsWay.Utilities.Fills.FillKind,System.Int32)">
            <summary>
            填充目标特性
            </summary>
            <param name="kind">填充类型</param>
            <param name="group">填充组，当出现相同类型多个填充属性时需要设置组</param>
        </member>
        <member name="T:WitsWay.Utilities.Fills.IFiller">
            <summary>
            填充器
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Fills.IFiller.Kind">
            <summary>
            填充数据类型
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Fills.IFiller.GetFillValue(System.Object,System.Object[])">
            <summary>
            获取填充值
            </summary>
            <param name="key">数据键</param>
            <param name="paras">附加参数</param>
            <returns>填充值</returns>
        </member>
        <member name="T:WitsWay.Utilities.Guards.ArgumentGuard">
            <summary>
            参数检查
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Guards.ArgumentGuard.ArgumentNotNull(System.String,System.Object)">
            <summary>
            参数非空
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Guards.ArgumentGuard.ArgumentNotNullOrEmpty(System.String,System.Object)">
            <summary>
            参数非空
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Guards.ArgumentGuard.ArgumentGreaterThanZero(System.String,System.Int32)">
            <summary>
            参数大于0
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Guards.ArgumentGuard.TypeIsAssignable(System.Type,System.Type,System.String,System.String)">
            <summary>
            检查参数类型从指定的类型继承或实现
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Guards.ArgumentGuard.InstanceIsAssignable(System.Type,System.Object,System.String,System.String)">
            <summary>
            检查参数实例从指定的类型继承或实现
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Guards.ArgumentGuard.ThrowArgumentError(System.String)">
            <summary>
            抛出参数错误
            </summary>
            <param name="argumentName">参数名</param>
        </member>
        <member name="M:WitsWay.Utilities.Guards.ArgumentGuard.GetStackTraceInfo">
            <summary>
            获取堆栈跟踪信息
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Layouts.EditorKinds">
            <summary>
            控件类型
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.EditorKinds.TextEdit">
            <summary>
            TextEdit
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.EditorKinds.CheckedListBoxControl">
            <summary>
            CheckedListBoxControl
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.EditorKinds.RadioGroup">
            <summary>
            RadioGroup
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.EditorKinds.ComboBoxEdit">
            <summary>
            ComboBoxEdit
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.EditorKinds.MemoEdit">
            <summary>
            MemoEdit
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.EditorKinds.SpinEdit">
            <summary>
            SpinEdit
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.EditorKinds.Customer">
            <summary>
            用户自定义控件
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.EditorKinds.MRUEdit">
            <summary>
            MRUEdit
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.EditorKinds.LookUpEdit">
            <summary>
            LookUpEdit
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.EditorKinds.ListBoxControl">
            <summary>
            ListBoxControl
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.EditorKinds.DropDownButtonEdit">
            <summary>
            DropDownButton
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.EditorKinds.ButtonEdit">
            <summary>
            ButtonEdit
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.EditorKinds.TimeEdit">
            <summary>
            TimeEdit
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.EditorKinds.DateEdit">
            <summary>
            DateEdit
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.EditorKinds.SearchControl">
            <summary>
            SearchControl
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.EditorKinds.RichEditControl">
            <summary>
            RichEditControl
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.EditorKinds.CheckedListBoxControlFlags">
            <summary>
            CheckedListBoxControlFlags 用于位域枚举
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Layouts.ILayoutConsumer">
            <summary>
            布局消费者
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Layouts.ILayoutConsumer.UseLayouts">
            <summary>
            使用的所有布局编码
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Layouts.ILayoutConsumer.GetLayoutDescription">
            <summary>
            获取布局描述信息
            </summary>
            <returns>布局描述信息</returns>
        </member>
        <member name="P:WitsWay.Utilities.Layouts.ILayoutConsumer.StreamProvider">
            <summary>
            流提供者
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Layouts.ILayoutStreamProvider">
            <summary>
            布局流内容提供者
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Layouts.ILayoutStreamProvider.GetLayoutStream(System.String)">
            <summary>
            获取布局流
            </summary>
            <param name="layoutCode">布局编码</param>
            <returns>布局流数据</returns>
        </member>
        <member name="T:WitsWay.Utilities.Layouts.LayoutDescription">
            <summary>
            布局描述信息
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Layouts.LayoutDescription.Code">
            <summary>
            布局编码
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Layouts.LayoutDescription.Name">
            <summary>
            布局名称
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Layouts.LayoutDescription.UiKind">
            <summary>
            布局UI类型
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Layouts.LayoutDescription.TargetModel">
            <summary>
            目标模型
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Layouts.LayoutDescription.Remark">
            <summary>
            布局备注
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Layouts.LayoutUiKinds">
            <summary>
            布局UI类型
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.LayoutUiKinds.Form">
            <summary>
            窗体布局
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.LayoutUiKinds.GridList">
            <summary>
            表格布局
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.LayoutUiKinds.TreeList">
            <summary>
            树状表格布局
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Layouts.TreeLayoutAttribute">
            <summary>
            标识模型是否用于树布局
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Layouts.TreeLayoutModelAttribute">
            <summary>
            标识模型是否用于TreeList布局
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Layouts.GridLayoutModelAttribute">
            <summary>
            标识模型是否用于XtraGrid布局
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Layouts.ICustomerUC">
            <summary>
            用户自定义控件公用接口
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Layouts.ICustomerUC.AdapterInstance">
            <summary>
            Adapter
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Layouts.ICustomerUC.CustomerControlName">
            <summary>
            控件名称
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Layouts.ICustomerUC.GetResult(System.Int32)">
            <summary>
            取用户控件的操作结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Layouts.ICustomerUC.BindUC(System.Int32)">
            <summary>
            显示用户控件信息
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Layouts.ILayoutEditor">
            <summary>
            布局控件基础接口
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Layouts.ILayoutEditor.GetValue">
            <summary>
            取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Layouts.ILayoutEditor.SetValue(System.Object)">
            <summary>
            设值
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:WitsWay.Utilities.Layouts.ISelectorAdapter">
            <summary>
            用户控件接口
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Layouts.LayoutEditorAttribute">
            <summary>
            用于属性对应的控件呈现
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Layouts.LayoutEditorAttribute.IsShowChildProperty">
            <summary>
            是否显示子对象的属性来布局窗体
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Layouts.LayoutEditorAttribute.#ctor">
            <summary>
            用于属性对应的控件呈现
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Layouts.LayoutEditorAttribute.IsShow">
            <summary>
            是否在界面上显示(默认是显示)
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Layouts.LayoutEditorAttribute.EditorKind">
            <summary>
            控件的Type
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Layouts.LayoutEditorAttribute.CustomerControlName">
            <summary>
            用户控件的名称，表示要用哪一个用户控件， UserControl的时候才设置，非UserControl的时候不用设置
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Layouts.LayoutEditorAttribute.CustomerControlIndex">
            <summary>
            用户控件的顺序值，默认是0，当一个用户控件在窗体上多次显示的时候才需要使用，UserControl的时候才设置，非UserControl的时候不用设置
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Layouts.LayoutKinds">
            <summary>
            布局类型
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.LayoutKinds.CurrentLayout">
            <summary>
            当前布局
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Layouts.LayoutKinds.DefaultLayout">
            <summary>
            默认布局
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Layouts.FormLayoutModelAttribute">
            <summary>
            用于区分实体是否要实现FormLayout布局
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Models.LoginPost">
            <summary>
            登录提交实体
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginPost.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginPost.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginPost.ValidateCode">
            <summary>
            验证码
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginPost.Token">
            <summary>
            令牌
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginPost.Timestamp">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Models.LoginResult">
            <summary>
            登录返回实体
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginResult.SessionKey">
            <summary>
            会话键
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginResult.CorpId">
            <summary>
            企业Id
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginResult.CorpKind">
            <summary>
            公司类型
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginResult.CorpCode">
            <summary>
            企业编码
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginResult.CorpName">
            <summary>
            企业名称
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginResult.CorpShortName">
            <summary>
            企业简称
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginResult.EmployeeId">
            <summary>
            员工Id
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginResult.EmployeeName">
            <summary>
            员工名称
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginResult.EmployeeWorkNumber">
            <summary>
            员工工号
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginResult.Username">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginResult.Nickname">
            <summary>
            用户昵称
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginResult.LoginTime">
            <summary>
            登录时间
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginResult.RenewalInterval">
            <summary>
            续约间隔
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginResult.SignPublicKey">
            <summary>
            签名公钥
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginResult.RenewalTime">
            <summary>
            续约时间
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginResult.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Models.LoginOperator">
            <summary>
            登录操作人员
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginOperator.CorpId">
            <summary>
            企业ID
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginOperator.CorpCode">
            <summary>
            企业编码
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginOperator.CorpShortName">
            <summary>
            企业简称
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginOperator.CorpName">
            <summary>
            企业名称
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginOperator.OperatorId">
            <summary>
            操作员ID
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginOperator.OperatorCode">
            <summary>
            操作员编码
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginOperator.OperatorName">
            <summary>
            操作员名称
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginOperator.SystemIdentify">
            <summary>
            系统标识
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginOperator.LoginIP">
            <summary>
            登陆IP
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginOperator.ComputerId">
            <summary>
            工位机ID(工位机程序使用)
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginOperator.PhysicalAddress">
            <summary>
            机器物理地址(工位机程序使用)
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.LoginOperator.Tocken">
            <summary>
            授权令牌
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Models.OperationLog">
            <summary>
            操作日志
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.OperationLog.ID">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.OperationLog.CorpID">
            <summary>
            CorpID.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.OperationLog.EmployeeID">
            <summary>
            UserID.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.OperationLog.ServiceName">
            <summary>
            Service (class/interface) name.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.OperationLog.MethodName">
            <summary>
            Executed method name.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.OperationLog.Parameters">
            <summary>
            Calling parameters.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.OperationLog.ExecutionTime">
            <summary>
            Start time of the method execution.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.OperationLog.ExecutionDuration">
            <summary>
            Total duration of the method call.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.OperationLog.ClientIpAddress">
            <summary>
            IP address of the client.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.OperationLog.ClientName">
            <summary>
            Name (generally computer name) of the client.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.OperationLog.BrowserInfo">
            <summary>
            调用浏览器信息
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.OperationLog.CustomData">
            <summary>
            Optional custom data that can be filled and used.
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.OperationLog.ExceptionInfo">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Models.OperationLog.ToString">
            <summary>
            <![CDATA[Audit Log: ServiceXXX.MethodXXX is executed by user XXX in DurationXXX ms from IpXXX]]>
            </summary>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.Models.SequenceNumber">
            <summary>
            系统序列号管理表
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Models.SequenceNumber.SequenceId">
            <sumary>
             序列唯一标识
            </sumary>
        </member>
        <member name="P:WitsWay.Utilities.Models.SequenceNumber.SequenceValue">
            <sumary>
             序列当前值
            </sumary>
        </member>
        <member name="P:WitsWay.Utilities.Models.SequenceNumber.SequenceStep">
            <sumary>
             序列步长
            </sumary>
        </member>
        <member name="P:WitsWay.Utilities.Models.SequenceNumber.SequenceInit">
            <sumary>
             序列初始值
            </sumary>
        </member>
        <member name="P:WitsWay.Utilities.Models.SequenceNumber.SequenceCircle">
            <sumary>
             序列周期
            </sumary>
        </member>
        <member name="P:WitsWay.Utilities.Models.SequenceNumber.UpdateTime">
            <sumary>
             序列最后更新时间
            </sumary>
        </member>
        <member name="T:WitsWay.Utilities.Patterns.Sandbox">
            <summary>
            沙箱
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Patterns.Sandbox.Create(System.String)">
            <summary>
            创建沙箱
            </summary>
            <param name="domainName">应用程序域名称</param>
            <returns>应用程序域沙箱包装</returns>
        </member>
        <member name="M:WitsWay.Utilities.Patterns.Sandbox.Execute(System.String,System.String,System.String,System.Object[])">
            <summary>
            执行方法
            </summary>
            <param name="assemblyName">程序集名称</param>
            <param name="typeName">类型名称</param>
            <param name="methodName">方法名称</param>
            <param name="parameters">参数</param>
        </member>
        <member name="M:WitsWay.Utilities.Patterns.Sandbox.Dispose">
            <summary>
            释放应用程序域
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Patterns.Sandbox.InitializeLifetimeService">
            <summary>
            自定义对象租用周期
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Patterns.MsDispose">
            <summary>
            在继承关系的基类中使用该模式
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Patterns.MsDispose.Dispose">
            <summary>
            手动调用显示终结
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Patterns.MsDispose.Close">
            <summary>
            释放非托管资源
            向GC标示托管资源可回收
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Patterns.MsDispose.Finalize">
            <summary>
            系统回收
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Patterns.MsDispose.Dispose(System.Boolean)">
            <summary>
            清理非托管资源
            </summary>
            <param name="disposing">Should be true when calling from Dispose().</param>
        </member>
        <member name="M:WitsWay.Utilities.Patterns.MsDispose.ReleaseUnManagedResource">
            <summary>
            在子类中重写
            以释放非托管资源
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Patterns.Singleton`1">
            <summary>
            
            线程安全的 Singleton 模式最佳实践
            
            例子:
            
            public class Demo
            {
            	public static Form1 Instance1
            	{
            		get
            		{
            			return Singleton＜Form1＞.Instance;
            		}
            	}
            }
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Patterns.Singleton`1.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Regexs.ParseClassAttribute">
            <summary>
            用于标示该类是解析类
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Regexs.ParseClassAttribute.RegexString">
            <summary>
            正则匹配字符串
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Regexs.ParseClassAttribute.#ctor(System.String)">
            <summary>
            够造函数
            </summary>
            <param name="pattern">正则字符串</param>
        </member>
        <member name="T:WitsWay.Utilities.Regexs.ParsePropertyAttribute">
            <summary>
            要解析的属性
            特性标示
            <remarks>
            每个RegexClassInfo中存储了ParseClassAttribute和ParsePropertyAttribute字典
            该类负责属性的赋值，故一个RegexClassInfo实例化时会多次实例化本类
            </remarks>
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Regexs.ParsePropertyAttribute._converHelperClass">
            <summary>
            默认转换函数类，默认为DataConverHelper
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Regexs.ParsePropertyAttribute.RegexGroupName">
            <summary>
            匹配组名
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Regexs.ParsePropertyAttribute.PropertyInfo">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Regexs.ParsePropertyAttribute.CreateType">
            <summary>
            转换辅助类 
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Regexs.ParsePropertyAttribute.#ctor(System.String)">
            <summary>
            属性匹配设置
            </summary>
            <param name="groupName">正则表达式中的GroupName</param>
        </member>
        <member name="M:WitsWay.Utilities.Regexs.ParsePropertyAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="groupName">匹配组名</param>
            <param name="converFun">转换函数名</param>
        </member>
        <member name="M:WitsWay.Utilities.Regexs.ParsePropertyAttribute.#ctor(System.String,System.Type,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="groupName">匹配组名</param>
            <param name="converClass">用于转换的类</param>
            <param name="converFun">转换函数</param>
        </member>
        <member name="M:WitsWay.Utilities.Regexs.ParsePropertyAttribute.SetPropertyValue(System.Object,System.Text.RegularExpressions.Group)">
            <summary>
            设置属性的值
            </summary>
            <param name="matchObject"></param>
            <param name="group"></param>
            <returns>设置成功返回true</returns>
        </member>
        <member name="M:WitsWay.Utilities.Regexs.ParsePropertyAttribute.IsRegexMatchClass(System.Type)">
            <summary>
            判断是不是包含正则表达式的类
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Regexs.ParsePropertyAttribute.DefaultDataConverHelper">
            <summary>
            数据转换辅助类
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Regexs.ParsePropertyAttribute.DefaultDataConverHelper.StringToHexInt(System.String)">
            <summary>
            从字符串转换到Int类型
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Regexs.HexExtends.HexToInt(System.String)">
            <summary>
            16进制字符串转换为Int
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Regexs.RegexClassFactory">
            <summary>
            生成正则类的工厂
            <remarks>
            通过传入的Type生成正则类
            </remarks>
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Regexs.RegexClassFactory.TypeDic">
            <summary>
            用于存放已经匹配过的正则类
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Regexs.RegexClassFactory.GetRegexClass(System.Object)">
            <summary>
            取得正则类
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Regexs.RegexClassFactory.GetRegexClass(System.Type)">
            <summary>
            取得正则类
            </summary>
            <param name="type">类型Type</param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Regexs.RegexClassFactory.CreateRegexClassInfo(System.Type,WitsWay.Utilities.Regexs.ParseClassAttribute)">
            <summary>
            创建RegexClassInfo类
            </summary>
            <param name="type">要创建正则类信息的Type</param>
            <param name="customAttribute">自定义特性ParseClassAttribute</param>
            <returns>正则类信息</returns>
        </member>
        <member name="T:WitsWay.Utilities.Regexs.RegexClassInfo">
            <summary>
            正则匹配类信息
            <remarks>
            用于存储使用了ParseClassAttribute的类的信息
            </remarks>
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Regexs.RegexClassInfo.CustomClassInfo">
            <summary>
            协议解析特性
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Regexs.RegexClassInfo.PropertyMap">
            <summary>
            要解析的所有属性字典
            key:属性的名称
            value:属性的自定义特性ParsePropertyAttribute
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Regexs.RegexClassInfo.RegexInfo">
            <summary>
            给System.Text.RegularExpressions.Regex取别名
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Regexs.RegexClassInfo.RegexPattern">
            <summary>
            正则匹配字符串
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Regexs.RegexClassInfo.Available">
            <summary>
            判断是否时协议解析类
            [是否有特性头][需要解析的属性大于零]
            </summary>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Regexs.RegexClassInfo.CreateRegex(System.String)">
            <summary>
            创建MS正则Regex类
            </summary>
            <param name="pattern">正则匹配字符串</param>
        </member>
        <member name="M:WitsWay.Utilities.Regexs.RegexClassInfo.SetPropertyValue(System.String@,System.Object,System.Boolean)">
            <summary>
            设置匹配值
            </summary>
            <param name="processStr">要处理的字符串</param>
            <param name="setObject">要设置值的对象</param>
            <param name="deleteMatchString">是否删除匹配的字符</param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Regexs.RegexClassInfo.Match(System.String)">
            <summary>
            匹配
            </summary>
            <param name="processStr">要匹配的字符串</param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Regexs.RegexClassInfo.SetValue(System.Object,System.String,System.Text.RegularExpressions.Group)">
            <summary>
            匹配并设置值
            </summary>
            <param name="matchObject">要匹配的对象</param>
            <param name="name">属性名称</param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.Regexs.RegexHelper">
            <summary>
            为协议解析提供正则匹配的入口
            完成匹配字符串并生成对象
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Regexs.RegexHelper.Match``1(System.String@,System.Boolean)">
            <summary>
            泛型匹配
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Regexs.RegexHelper.Match(System.Object,System.String@,System.Boolean)">
            <summary>
            匹配指定的类
            </summary>
            <param name="matchObject">匹配后生成的结果对象</param>
            <param name="processStr"></param>
            <param name="delMatchStr"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Regexs.RegexHelper.MatchList``1(System.String@,System.Boolean)">
            <summary>
            匹配多个对象
            </summary>
            <typeparam name="T">匹配类型</typeparam>
            <param name="processStr">处理字符串</param>
            <param name="delMatchStr">是否删除已经匹配的字符串</param>
            <returns>返回匹配的对象列表</returns>
        </member>
        <member name="M:WitsWay.Utilities.Regexs.RegexHelper.GetClassRegex``1">
            <summary>
            获取正则表达式
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.Services.IService">
            <summary>
            服务标记接口
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.SqlBulks.AllColumnSelect`1">
            <summary>
            所有列选择器
            </summary>
            <typeparam name="T">实体类型</typeparam>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.AllColumnSelect`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.String,System.Collections.Generic.HashSet{System.String},System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.SqlClient.SqlBulkCopyOptions,WitsWay.Utilities.SqlBulks.BulkOperations)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="tableName"></param>
            <param name="columns"></param>
            <param name="schema"></param>
            <param name="sourceAlias"></param>
            <param name="targetAlias"></param>
            <param name="sqlTimeout"></param>
            <param name="bulkCopyTimeout"></param>
            <param name="bulkCopyEnableStreaming"></param>
            <param name="bulkCopyNotifyAfter"></param>
            <param name="bulkCopyBatchSize"></param>
            <param name="sqlBulkCopyOptions"></param>
            <param name="ext"></param>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.AllColumnSelect`1.CustomColumnMapping(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            By default SqlBulkTools will attempt to match the model property names to SQL column names (case insensitive). 
            If any of your model property names do not match 
            the SQL table column(s) as defined in given table, then use this method to set up a custom mapping.  
            </summary>
            <param name="source">
            The object member that has a different name in SQL table. 
            </param>
            <param name="destination">
            The actual name of column as represented in SQL table. 
            </param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.AllColumnSelect`1.AddTmpDisableNonClusteredIndex(System.String)">
            <summary>
            Disables non-clustered index. You can select One to Many non-clustered indexes. This option should be considered on 
            a case-by-case basis. Understand the consequences before using this option.  
            </summary>
            <param name="indexName"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.AllColumnSelect`1.TmpDisableAllNonClusteredIndexes">
            <summary>
            Disables all Non-Clustered indexes on the table before the transaction and rebuilds after the 
            transaction. This option should be considered on a case-by-case basis. Understand the 
            consequences before using this option.  
            </summary>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.AllColumnSelect`1.BulkInsert">
            <summary>
            A bulk insert will attempt to insert all records. If you have any unique constraints on columns, these must be respected. 
            Notes: (1) Only the columns configured (via AddColumn) will be evaluated. (3) Use AddAllColumns to add all columns in table. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.AllColumnSelect`1.BulkInsertOrUpdate">
            <summary>
            A bulk insert or update is also known as bulk upsert or merge. All matching rows from the source will be updated.
            Any unique rows not found in target but exist in source will be added. Notes: (1) BulkInsertOrUpdate requires at least 
            one MatchTargetOn property to be configured. (2) Only the columns configured (via AddColumn) (3) Use AddAllColumns to add all columns in table.
            will be evaluated. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.AllColumnSelect`1.BulkUpdate">
            <summary>
            A bulk update will attempt to update any matching records. Notes: (1) BulkUpdate requires at least one MatchTargetOn 
            property to be configured. (2) Only the columns configured (via AddColumn) will be evaluated. (3) Use AddAllColumns to add all columns in table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.AllColumnSelect`1.BulkDelete">
            <summary>
            A bulk delete will delete records when matched. Consider using a DTO with only the needed information (e.g. PK) Notes: 
            (1) BulkUpdate requires at least one MatchTargetOn property to be configured.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.SqlBulks.BulkDelete`1">
            <summary>
            批量删除
            </summary>
            <typeparam name="T">实体类型</typeparam>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkDelete`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.String,System.String,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.HashSet{System.String},System.Boolean,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.SqlClient.SqlBulkCopyOptions,WitsWay.Utilities.SqlBulks.BulkOperations)">
            <summary>
            批量删除
            </summary>
            <param name="list"></param>
            <param name="tableName"></param>
            <param name="schema"></param>
            <param name="columns"></param>
            <param name="disableAllIndexes"></param>
            <param name="sourceAlias"></param>
            <param name="targetAlias"></param>
            <param name="customColumnMappings"></param>
            <param name="sqlTimeout"></param>
            <param name="bulkCopyTimeout"></param>
            <param name="bulkCopyEnableStreaming"></param>
            <param name="bulkCopyNotifyAfter"></param>
            <param name="bulkCopyBatchSize"></param>
            <param name="sqlBulkCopyOptions"></param>
            <param name="ext"></param>
            <param name="disableIndexList"></param>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkDelete`1.MatchTargetOn(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            At least one MatchTargetOn is required for correct configuration. MatchTargetOn is the matching clause for evaluating 
            each row in table. This is usally set to the unique identifier in the table (e.g. Id). Multiple MatchTargetOn members are allowed 
            for matching composite relationships. 
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkDelete`1.WitsWay#Utilities#SqlBulks#ITransaction#CommitTransaction(System.String,System.Data.SqlClient.SqlCredential,System.Data.SqlClient.SqlConnection)">
            <summary>
            提交事务
            </summary>
            <param name="connectionName">连接名称</param>
            <param name="credentials">安全证书</param>
            <param name="connection">连接</param>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkDelete`1.WitsWay#Utilities#SqlBulks#ITransaction#CommitTransactionAsync(System.String,System.Data.SqlClient.SqlCredential,System.Data.SqlClient.SqlConnection)">
            <summary>
            异步提交事务
            </summary>
            <param name="connectionName">连接名称</param>
            <param name="credentials">安全证书</param>
            <param name="connection">连接</param>
            <returns>异步任务</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:WitsWay.Utilities.SqlBulks.BulkInsert`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkInsert`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.String,System.String,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.HashSet{System.String},System.Boolean,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.SqlClient.SqlBulkCopyOptions,WitsWay.Utilities.SqlBulks.BulkOperations)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="tableName"></param>
            <param name="schema"></param>
            <param name="columns"></param>
            <param name="disableIndexList"></param>
            <param name="disableAllIndexes"></param>
            <param name="sourceAlias"></param>
            <param name="targetAlias"></param>
            <param name="customColumnMappings"></param>
            <param name="bulkCopyTimeout"></param>
            <param name="bulkCopyEnableStreaming"></param>
            <param name="bulkCopyNotifyAfter"></param>
            <param name="bulkCopyBatchSize"></param>
            <param name="sqlBulkCopyOptions"></param>
            <param name="ext"></param>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkInsert`1.WitsWay#Utilities#SqlBulks#ITransaction#CommitTransactionAsync(System.String,System.Data.SqlClient.SqlCredential,System.Data.SqlClient.SqlConnection)">
            <summary>
            
            </summary>
            <param name="connectionName"></param>
            <param name="credentials"></param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.SqlBulks.BulkInsertOrUpdate`1">
            <summary>
            批量插入或更新
            </summary>
            <typeparam name="T">实体类型</typeparam>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkInsertOrUpdate`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.String,System.String,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.HashSet{System.String},System.Boolean,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.SqlClient.SqlBulkCopyOptions,WitsWay.Utilities.SqlBulks.BulkOperations)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="tableName"></param>
            <param name="schema"></param>
            <param name="columns"></param>
            <param name="disableIndexList"></param>
            <param name="disableAllIndexes"></param>
            <param name="sourceAlias"></param>
            <param name="targetAlias"></param>
            <param name="customColumnMappings"></param>
            <param name="sqlTimeout"></param>
            <param name="bulkCopyTimeout"></param>
            <param name="bulkCopyEnableStreaming"></param>
            <param name="bulkCopyNotifyAfter"></param>
            <param name="bulkCopyBatchSize"></param>
            <param name="sqlBulkCopyOptions"></param>
            <param name="ext"></param>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkInsertOrUpdate`1.MatchTargetOn(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            至少需要正确配置一个MatchTargetOn，用于确定Table中每一行的匹配Clause，通常使用唯一标识作为MatchTargetOn，也允许使用多列匹配复杂的关系
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkInsertOrUpdate`1.SetIdentityColumn(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Sets the identity column for the table. Required if an Identity column exists in table and one of the two 
            following conditions is met: (1) MatchTargetOn list contains an identity column (2) AddAllColumns is used in setup. 
            </summary>
            <param name="columnName"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkInsertOrUpdate`1.SetIdentityColumn(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            Sets the identity column for the table. Required if an Identity column exists in table and one of the two 
            following conditions is met: (1) MatchTargetOn list contains an identity column (2) AddAllColumns is used in setup. 
            </summary>
            <param name="columnName"></param>
            <param name="outputIdentity"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkInsertOrUpdate`1.DeleteWhenNotMatched(System.Boolean)">
            <summary>
            If a target record can't be matched to a source record, it's deleted. Notes: (1) This is false by default. (2) Use at your own risk.
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.SqlBulks.BulkOperations">
            <summary>
            批量操作
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkOperations.CommitTransaction(System.String,System.Data.SqlClient.SqlCredential)">
            <summary>
            Commits a transaction to database. A valid setup must exist for operation to be 
            successful. Notes: (1) The connectionName parameter is a name that you provide to 
            uniquely identify a connection string so that it can be retrieved at run time.
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="connectionName"></param>
            <param name="credentials"></param>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkOperations.CommitTransactionAsync(System.String,System.Data.SqlClient.SqlCredential)">
            <summary>
            Commits a transaction to database. A valid setup must exist for operation to be 
            successful. Notes: (1) The connectionName parameter is a name that you provide to 
            uniquely identify a connection string so that it can be retrieved at run time.
            </summary>
            <param name="connectionName"></param>
            <param name="credentials"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkOperations.CommitTransaction(System.Data.SqlClient.SqlConnection)">
            <summary>
            Commits a transaction to database. A valid setup must exist for operation to be 
            successful. 
            </summary>
            <param name="connection"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkOperations.CommitTransactionAsync(System.Data.SqlClient.SqlConnection)">
            <summary>
            Commits a transaction to database. A valid setup must exist for operation to be 
            successful. 
            </summary>
            <param name="connection"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkOperations.Setup``1(System.Func{WitsWay.Utilities.SqlBulks.Setup{``0},WitsWay.Utilities.SqlBulks.CollectionSelect{``0}})">
            <summary>
            Each transaction requires a valid setup. Examples available at: https://github.com/gtaylor44/SqlBulkTools 
            </summary>
            <typeparam name="T">The type of collection to be used.</typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.SqlBulks.BulkOperationsHelpers">
            <summary>
            批量操作辅助类
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.SqlBulks.BulkOperationsHelpers.PrecisionType">
            <summary>
            精度类型
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.SqlBulks.BulkOperationsHelpers.PrecisionType.NumericPrecision">
            <summary>
            数字精度
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.SqlBulks.BulkOperationsHelpers.PrecisionType.NumericScale">
            <summary>
            数字总长
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkOperationsHelpers.BuildCreateTempTable(System.Collections.Generic.HashSet{System.String},System.Data.DataTable,System.Nullable{System.Boolean})">
            <summary>
            创建临时表
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkOperationsHelpers.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.HashSet{System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.Int32,``0})">
            <summary>
            转换DataTable
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkOperationsHelpers.GetFullQualifyingTableName(System.String,System.String,System.String)">
            <summary>
            获取表全名【数据库】.【架构】.【表名】
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkOperationsHelpers.CheckForAdditionalColumns(System.Collections.Generic.HashSet{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            If there are MatchOnColumns that don't exist in columns, add to columns.
            </summary>
            <param name="columns"></param>
            <param name="matchOnColumns"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkOperationsHelpers.DoColumnMappings(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.HashSet{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            确保在ToDataTable后调用DoColumnMappings
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkOperationsHelpers.DoColumnMappings(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.HashSet{System.String})">
            <summary>
            确保在ToDataTable后调用DoColumnMappings
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkOperationsHelpers.SetSqlBulkCopySettings(System.Data.SqlClient.SqlBulkCopy,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32)">
            <summary>
            Advanced Settings for SQLBulkCopy class. 
            </summary>
            <param name="bulkcopy"></param>
            <param name="bulkCopyEnableStreaming"></param>
            <param name="bulkCopyBatchSize"></param>
            <param name="bulkCopyNotifyAfter"></param>
            <param name="bulkCopyTimeout"></param>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkOperationsHelpers.MapColumns(System.Data.SqlClient.SqlBulkCopy,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This is used only for the BulkInsert method at this time.  
            </summary>
            <param name="bulkCopy"></param>
            <param name="columns"></param>
            <param name="customColumnMappings"></param>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkOperationsHelpers.GetDatabaseSchema(System.Data.SqlClient.SqlConnection,System.String,System.String)">
            <summary>
            Gets schema information for a table. Used to get SQL type of property. 
            </summary>
            <param name="conn"></param>
            <param name="schema"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkOperationsHelpers.InsertToTmpTable(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.DataTable,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>
            插入临时表
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkOperationsHelpers.InsertToTmpTableAsync(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.DataTable,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>
            异步插入临时表
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.SqlBulks.IndexOperation">
            <summary>
            索引操作
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.SqlBulks.IndexOperation.Rebuild">
            <summary>
            重建
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.SqlBulks.IndexOperation.Disable">
            <summary>
            禁用
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.SqlBulks.Constants">
            <summary>
            静态常量
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.SqlBulks.Constants.DefaultSchemaName">
            <summary>
            默认架构名称
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.SqlBulks.OperationType">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.SqlBulks.OperationType.Insert">
            <summary>
            插入
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.SqlBulks.OperationType.InsertOrUpdate">
            <summary>
            插入或更新
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.SqlBulks.BulkUpdate`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkUpdate`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.String,System.String,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.HashSet{System.String},System.Boolean,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32,System.Int32,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.SqlClient.SqlBulkCopyOptions,WitsWay.Utilities.SqlBulks.BulkOperations)">
            <summary>
            Updates existing records in bulk. 
            </summary>
            <param name="list"></param>
            <param name="tableName"></param>
            <param name="schema"></param>
            <param name="columns"></param>
            <param name="disableAllIndexes"></param>
            <param name="sourceAlias"></param>
            <param name="targetAlias"></param>
            <param name="customColumnMappings"></param>
            <param name="sqlTimeout"></param>
            <param name="bulkCopyTimeout"></param>
            <param name="bulkCopyEnableStreaming"></param>
            <param name="bulkCopyNotifyAfter"></param>
            <param name="bulkCopyBatchSize"></param>
            <param name="sqlBulkCopyOptions"></param>
            <param name="ext"></param>
            <param name="disableIndexList"></param>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkUpdate`1.MatchTargetOn(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            At least one MatchTargetOn is required for correct configuration. MatchTargetOn is the matching clause for evaluating 
            each row in table. This is usally set to the unique identifier in the table (e.g. Id). Multiple MatchTargetOn members are allowed 
            for matching composite relationships. 
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.BulkUpdate`1.SetIdentityColumn(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Sets the identity column for the table. Required if an Identity column exists in table and one of the two 
            following conditions is met: (1) MatchTargetOn list contains an identity column (2) AddAllColumns is used in setup. 
            </summary>
            <param name="columnName"></param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:WitsWay.Utilities.SqlBulks.ColumnSelect`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.ColumnSelect`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.String,System.Collections.Generic.HashSet{System.String},System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Data.SqlClient.SqlBulkCopyOptions,WitsWay.Utilities.SqlBulks.BulkOperations)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="tableName"></param>
            <param name="columns"></param>
            <param name="schema"></param>
            <param name="sourceAlias"></param>
            <param name="targetAlias"></param>
            <param name="sqlTimeout"></param>
            <param name="bulkCopyTimeout"></param>
            <param name="bulkCopyEnableStreaming"></param>
            <param name="bulkCopyNotifyAfter"></param>
            <param name="bulkCopyBatchSize"></param>
            <param name="sqlBulkCopyOptions"></param>
            <param name="ext"></param>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.ColumnSelect`1.AddColumn(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Add each column that you want to include in the query. Only include the columns that are relevant to the 
            procedure for best performance. 
            </summary>
            <param name="columnName">Column name as represented in database</param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.ColumnSelect`1.CustomColumnMapping(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            By default SqlBulkTools will attempt to match the model property names to SQL column names (case insensitive). 
            If any of your model property names do not match 
            the SQL table column(s) as defined in given table, then use this method to set up a custom mapping.  
            </summary>
            <param name="source">
            The object member that has a different name in SQL table. 
            </param>
            <param name="destination">
            The actual name of column as represented in SQL table. 
            </param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.ColumnSelect`1.AddTmpDisableNonClusteredIndex(System.String)">
            <summary>
            Disables non-clustered index. You can select One to Many non-clustered indexes. This option should be considered on 
            a case-by-case basis. Understand the consequences before using this option.  
            </summary>
            <param name="indexName"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.ColumnSelect`1.TmpDisableAllNonClusteredIndexes">
            <summary>
            Disables all Non-Clustered indexes on the table before the transaction and rebuilds after the 
            transaction. This option should be considered on a case-by-case basis. Understand the 
            consequences before using this option.  
            </summary>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.ColumnSelect`1.BulkInsert">
            <summary>
            A bulk insert will attempt to insert all records. If you have any unique constraints on columns, these must be respected. 
            Notes: (1) Only the columns configured (via AddColumn) will be evaluated. (3) Use AddAllColumns to add all columns in table. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.ColumnSelect`1.BulkInsertOrUpdate">
            <summary>
            A bulk insert or update is also known as bulk upsert or merge. All matching rows from the source will be updated.
            Any unique rows not found in target but exist in source will be added. Notes: (1) BulkInsertOrUpdate requires at least 
            one MatchTargetOn property to be configured. (2) Only the columns configured (via AddColumn) 
            will be evaluated. (3) Use AddAllColumns to add all columns in table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.ColumnSelect`1.BulkUpdate">
            <summary>
            批量更新会尝试更新所有匹配的记录
            <remarks>
            ①BulkUpdate至少需要配置一个MatchTargetOn属性
            ②只有AddColumn对应的列会更新
            ③要添加所有列可使用AddAllColumns
            </remarks>
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.ColumnSelect`1.BulkDelete">
            <summary>
            批量删除所有的匹配记录，建议使用一个DTO对象只传递必须的信息（比如PK列）
            <remarks>
            BulkUpdate至少需要配置一个MatchTargetOn属性
            </remarks>
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.SqlBulks.IBulkOperations">
            <summary>
            批量操作接口
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.IBulkOperations.CommitTransaction(System.Data.SqlClient.SqlConnection)">
            <summary>
            提交事务
            </summary>
            <param name="connection">连接</param>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.IBulkOperations.CommitTransactionAsync(System.Data.SqlClient.SqlConnection)">
            <summary>
            异步提交事务
            </summary>
            <param name="connection">连接</param>
            <returns>异步Task</returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.IBulkOperations.CommitTransaction(System.String,System.Data.SqlClient.SqlCredential)">
            <summary>
            提交事务
            </summary>
            <param name="connectionName">连接名</param>
            <param name="credentials">安全证书</param>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.IBulkOperations.CommitTransactionAsync(System.String,System.Data.SqlClient.SqlCredential)">
            <summary>
            异步提交事务
            </summary>
            <param name="connectionName">连接名</param>
            <param name="credentials">安全证书</param>
            <returns>异步Task</returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.IBulkOperations.Setup``1(System.Func{WitsWay.Utilities.SqlBulks.Setup{``0},WitsWay.Utilities.SqlBulks.CollectionSelect{``0}})">
            <summary>
            操作装配
            </summary>
            <param name="list">列表映射Func委托</param>
            <typeparam name="T">实体类型</typeparam>
            <returns>集合选择器</returns>
        </member>
        <member name="T:WitsWay.Utilities.SqlBulks.ITransaction">
            <summary>
            事务支持接口
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.ITransaction.CommitTransaction(System.String,System.Data.SqlClient.SqlCredential,System.Data.SqlClient.SqlConnection)">
            <summary>
            提交事务
            </summary>
            <param name="connectionName">连接名称</param>
            <param name="credentials">安全证书</param>
            <param name="connection">连接</param>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.ITransaction.CommitTransactionAsync(System.String,System.Data.SqlClient.SqlCredential,System.Data.SqlClient.SqlConnection)">
            <summary>
            异步提交事务
            </summary>
            <param name="connectionName">连接名称</param>
            <param name="credentials">安全证书</param>
            <param name="connection">连接</param>
            <returns>异步任务</returns>
        </member>
        <member name="T:WitsWay.Utilities.SqlBulks.Setup`1">
            <summary>
            批量操作组装器
            </summary>
            <typeparam name="T">实体类型</typeparam>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.Setup`1.#ctor(System.String,System.String,WitsWay.Utilities.SqlBulks.BulkOperations)">
            <summary>
            批量操作组装器
            </summary>
            <param name="sourceAlias"></param>
            <param name="targetAlias"></param>
            <param name="bop"></param>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.Setup`1.ForCollection(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Represents the collection of objects to be inserted/upserted/updated/deleted (configured in next steps). 
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.SqlBulks.Table`1">
            <summary>
            Configurable options for table. 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.Table`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.String,System.String,System.String,WitsWay.Utilities.SqlBulks.BulkOperations)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="tableName"></param>
            <param name="sourceAlias"></param>
            <param name="targetAlias"></param>
            <param name="ext"></param>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.Table`1.AddColumn(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Add each column that you want to include in the query. Only include the columns that are relevant to the procedure for best performance. 
            </summary>
            <param name="columnName">Column name as represented in database</param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.Table`1.AddAllColumns">
            <summary>
            Adds all properties in model that are either value or string type. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.Table`1.WithSchema(System.String)">
            <summary>
            架构名（默认dbo)
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.Table`1.WithSqlCommandTimeout(System.Int32)">
            <summary>
            SqlCommand执行超时时间（默认600秒）
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.Table`1.WithBulkCopyCommandTimeout(System.Int32)">
            <summary>
            BulkCopy执行超时时间（默认600秒）
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.Table`1.WithBulkCopyEnableStreaming(System.Boolean)">
            <summary>
            Default is false. See docs for more info.
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.Table`1.WithBulkCopyNotifyAfter(System.Int32)">
            <summary>
            Triggers an event after x rows inserted. See docs for more info. 
            </summary>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.Table`1.WithBulkCopyBatchSize(System.Int32)">
            <summary>
            Default is 0. See docs for more info. 
            </summary>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.Table`1.WithSqlBulkCopyOptions(System.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>
            Enum representing options for SqlBulkCopy. Unless explicitely set, the default option will be used. 
            See https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlbulkcopyoptions(v=vs.110).aspx for a list of available options. 
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.SqlBulks.CollectionSelect`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.CollectionSelect`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.String,System.String,WitsWay.Utilities.SqlBulks.BulkOperations)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="sourceAlias"></param>
            <param name="targetAlias"></param>
            <param name="bop"></param>
        </member>
        <member name="M:WitsWay.Utilities.SqlBulks.CollectionSelect`1.WithTable(System.String)">
            <summary>
            Set the name of table for operation to take place. Registering a table is Required.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.Supports.GridSupport.GridSupportExtends">
            <summary>
            Grid表格支持
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Supports.GridSupport.GridSupportExtends.InitRowNo``1(System.Collections.Generic.List{``0})">
            <summary>
            初始化行号
            </summary>
            <param name="dataList">数据列表</param>
        </member>
        <member name="M:WitsWay.Utilities.Supports.GridSupport.GridSupportExtends.InitDataNo``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            初始化序号
            </summary>
            <param name="dataList">数据列表</param>
            <param name="pageIndex">当前页</param>
            <param name="pageSize">页大小</param>
        </member>
        <member name="T:WitsWay.Utilities.Supports.GridSupport.IGridSupport">
            <summary>
            行号/序号
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.GridSupport.IGridSupport.GridRowId">
            <summary>
            行ID
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.GridSupport.IGridSupport.GridRowNo">
            <summary>
            行号
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.GridSupport.IGridSupport.GridDataNo">
            <summary>
            序号
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Supports.GridSupport.GridSupport`1">
            <summary>
            Grid表格支持
            </summary>
            <typeparam name="T">实体类型</typeparam>
        </member>
        <member name="P:WitsWay.Utilities.Supports.GridSupport.GridSupport`1.GridRowId">
            <summary>
            表格行 唯一标识
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.GridSupport.GridSupport`1.GridRowNo">
            <summary>
            行号
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.GridSupport.GridSupport`1.GridDataNo">
            <summary>
            序号
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Supports.IKey">
            <summary>
            键支持
            <remarks>
            此接口用于实体，将ID主键都转为string主键
            </remarks>
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.IKey.Key">
            <summary>
            主键
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Supports.ICheckable">
            <summary>
            ICheckable
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.ICheckable.IsChecked">
            <summary>
            IsChecked
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Supports.ITimestamp">
            <summary>
            时间戳支持
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.ITimestamp.Timestamp">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Supports.ISelected">
            <summary>
            实体选中接口
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.ISelected.IsSelected">
            <summary>
            是否选中
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.ISelected.ItemName">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Supports.IPinYinSupport">
            <summary>
            拼音支持
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.IPinYinSupport.PinYinTarget">
            <summary>
            拼音目标
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.IPinYinSupport.FullSpell">
            <summary>
            全拼
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.IPinYinSupport.FullCapital">
            <summary>
            所有字首字母
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.IPinYinSupport.FirstCapital">
            <summary>
            第一个首字母
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Supports.TreeSupport.ITreeSupport`1">
            <summary>
            树状支持
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.TreeSupport.ITreeSupport`1.Children">
            <summary>
            子节点
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.TreeSupport.ITreeSupport`1.Parent">
            <summary>
            父节点
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Supports.TreeSupport.ITreeSupport`1.SetParent(`0)">
            <summary>
            设置父节点
            </summary>
            <param name="parent">父节点</param>
        </member>
        <member name="T:WitsWay.Utilities.Supports.TreeSupport.TreeSupportExtends">
            <summary>
            树状支持辅类
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Supports.TreeSupport.TreeSupportExtends.GetRoots``1(System.Collections.Generic.List{``0})">
            <summary>
            取得根节点
            </summary>
            <param name="dataList"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Supports.TreeSupport.TreeSupportExtends.GetRoots``1(System.Collections.Generic.List{``0},System.Predicate{``0})">
            <summary>
            取得根节点
            </summary>
            <param name="dataList">数据列表</param>
            <param name="func">是否返回数据，返回true，可在委托方法中预处理数据</param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Supports.TreeSupport.TreeSupportExtends.InitTree``1(System.Collections.Generic.List{``0})">
            <summary>
            初始化树
            </summary>
            <param name="dataList">数据列表</param>
        </member>
        <member name="M:WitsWay.Utilities.Supports.TreeSupport.TreeSupportExtends.InitTreeForSerilize``1(System.Collections.Generic.List{``0})">
            <summary>
            提供无循环引用的可序列化树支持
            </summary>
            <param name="dataList">数据列表</param>
        </member>
        <member name="T:WitsWay.Utilities.Supports.TreeSupport.ITreeSupport">
            <summary>
            树状支持
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.TreeSupport.ITreeSupport.NodeParentId">
            <summary>
            节点父ID
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.TreeSupport.ITreeSupport.NodeId">
            <summary>
            节点ID
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.TreeSupport.ITreeSupport.NodeLevel">
            <summary>
            节点层级
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Supports.TreeSupport.ITreeSupport.SetNodeLevel(System.Int32)">
            <summary>
            设置节点层级
            </summary>
            <param name="nodeLevel">节点层级</param>
        </member>
        <member name="T:WitsWay.Utilities.Supports.TreeSupport.TreeSupport`1">
            <summary>
            树支持
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.TreeSupport.TreeSupport`1.Children">
            <summary>
            子节点列表
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.TreeSupport.TreeSupport`1.Parent">
            <summary>
            父节点
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Supports.TreeSupport.TreeSupport`1.SetParent(`0)">
            <summary>
            设置父节点
            </summary>
            <param name="parent">父节点</param>
        </member>
        <member name="P:WitsWay.Utilities.Supports.TreeSupport.TreeSupport`1.NodeParentId">
            <summary>
            父节点Id
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.TreeSupport.TreeSupport`1.NodeId">
            <summary>
            节点Id
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.TreeSupport.TreeSupport`1.HaveChild">
            <summary>
            是否有孩子节点
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.TreeSupport.TreeSupport`1.HaveParent">
            <summary>
            是否有父亲节点
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.TreeSupport.TreeSupport`1.ChildNum">
            <summary>
            子节点数量
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Supports.TreeSupport.TreeSupport`1.NodeLevel">
            <summary>
            节点层级
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Supports.TreeSupport.TreeSupport`1.SetNodeLevel(System.Int32)">
            <summary>
            设置节点层级
            </summary>
            <param name="nodeLevel">节点层级</param>
        </member>
        <member name="T:WitsWay.Utilities.Supports.KeyEqualityComparer`1">
            <summary>
            IKey接口对象相等比较器
            </summary>
            <typeparam name="T">实现IKey的类型</typeparam>
        </member>
        <member name="M:WitsWay.Utilities.Supports.KeyEqualityComparer`1.Equals(`0,`0)">
            <summary>
            相等比较
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Supports.KeyEqualityComparer`1.GetHashCode(`0)">
            <summary>
            取得对象HashCode
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Supports.KeyEqualityComparer">
            <summary>
            Key相等比较器
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Supports.KeyEqualityComparer.Default">
            <summary>
            默认比较器实例
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Supports.KeyEqualityComparer.Equals(WitsWay.Utilities.Supports.IKey,WitsWay.Utilities.Supports.IKey)">
            <summary>
            确定指定的对象是否相等
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Supports.KeyEqualityComparer.GetHashCode(WitsWay.Utilities.Supports.IKey)">
            <summary>
            返回指定对象的哈希代码
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.Providers.ParseProviders.IParseProvider">
            <summary>
            解析提供者接口
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Providers.ParseProviders.IParseProvider.Name">
            <summary>
            提供者名称
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Providers.ParseProviders.IParseProvider.Pack``1(``0)">
            <summary>
            封包对象
            </summary>
            <typeparam name="T">要封包的对象类型</typeparam>
            <param name="data">要封包的对象</param>
            <returns>封包后的string字符串</returns>
        </member>
        <member name="M:WitsWay.Utilities.Providers.ParseProviders.IParseProvider.Parse``1(System.String)">
            <summary>
            解包对象
            </summary>
            <typeparam name="T">解包后的对象类型</typeparam>
            <param name="value">要解包的字符串</param>
            <returns>解包后的对象</returns>
        </member>
        <member name="T:WitsWay.Utilities.Providers.ParseProviders.JsonParseProvider">
            <summary>
            Json序列化提供者
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Providers.ParseProviders.JsonParseProvider.ProviderName">
            <summary>
            Json序列化提供者
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Providers.ParseProviders.JsonParseProvider.Pack``1(``0)">
            <summary>
            打包
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Providers.ParseProviders.JsonParseProvider.Parse``1(System.String)">
            <summary>
            解析
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Providers.ParseProviders.JsonParseProvider.Name">
            <summary>
            Json序列化提供者
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Providers.ParseProviders.ParserFactory">
            <summary>
            序列化提供者工厂
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Providers.ParseProviders.ParserFactory.GetParser(System.String,System.Boolean)">
            <summary>
            获取对应providerName的IParseProvider接口实例对象
            </summary>
            <param name="providerName">提供者名称</param>
            <param name="noParserThrow">不存在对应名称的解析器，true则抛出异常，false则返回null</param>
            <returns>对应providerName的IParseProvider接口实例对象</returns>
        </member>
        <member name="P:WitsWay.Utilities.Providers.ParseProviders.ParserFactory.JsonParser">
            <summary>
            Json解析器
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Providers.ParseProviders.ParserFactory.XmlParser">
            <summary>
            Xml解析器
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Providers.ParseProviders.XmlParseProvider">
            <summary>
            Xml序列化提供者
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Providers.ParseProviders.XmlParseProvider.ProviderName">
            <summary>
            Xml序列化提供者
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Providers.ParseProviders.XmlParseProvider.Pack``1(``0)">
            <summary>
            打包
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Providers.ParseProviders.XmlParseProvider.Parse``1(System.String)">
            <summary>
            解析
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Providers.ParseProviders.XmlParseProvider.Name">
            <summary>
            Xml序列化提供者
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Thread.LockObject">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Thread.LockObject.LockExecute(System.Action)">
            <summary>
            锁定执行
            </summary>
            <param name="action">执行方法</param>
        </member>
        <member name="T:WitsWay.Utilities.UtilityStatics">
            <summary>
            公共类库使用静态常量
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityStatics.StringSplitCharsArray">
            <summary>
            StringSplit时候使用的Char数组
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.UtilityConsts">
            <summary>
            公共类库使用常量
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.ErrorDomainAppSettingKey">
            <summary>
            错误域AppSetting键
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.DaoAppSettingKey">
            <summary>
            数据访问AppSetting键
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.ServicesAppSettingKey">
            <summary>
            服务DLL AppSetting键（dllServices）
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.LoadDllsAppSettingKey">
            <summary>
            需要载入的程序集AppSetting键
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.CustomValidatorDllKey">
            <summary>
            自定义验证器Dll键
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.FormLayoutUcDlls">
            <summary>
            窗体布局用户控件Dll键
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.FormLayoutShowsDlls">
            <summary>
            窗体布局模型Dll键
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.GridLayoutShowsDlls">
            <summary>
            表格布局模型Dll键
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.TreeLayoutShowsDlls">
            <summary>
            树布局模型Dll键
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.XmlParseProviderName">
            <summary>
            Xml解析器提供者名称
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.JsonParseProviderName">
            <summary>
            Json解析器提供者名称
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.KeyboardEnter">
            <summary>
            回车键
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.KeyboardEsc">
            <summary>
            Esc键(小键盘)
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.KeyboardIns">
            <summary>
            Ins键(小键盘)
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.KeyboardDel">
            <summary>
            删除“Del”键（小键盘）
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.KeyboardNum0">
            <summary>
            0键(小键盘)
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.KeyboardNum1">
            <summary>
            1键(小键盘)
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.KeyboardNum2">
            <summary>
            2键(小键盘)
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.KeyboardNum3">
            <summary>
            3键(小键盘)
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.KeyboardNum4">
            <summary>
            4键(小键盘)
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.KeyboardNum5">
            <summary>
            5键(小键盘)
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.KeyboardNum6">
            <summary>
            6键(小键盘)
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.KeyboardNum7">
            <summary>
            7键(小键盘)
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.KeyboardNum8">
            <summary>
            8键(小键盘)
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.KeyboardNum9">
            <summary>
            9键(小键盘)
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.KeyboardAdd">
            <summary>
            +键(小键盘)
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.KeyboardSubtract">
            <summary>
            -键(小键盘)
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.UtilityConsts.KeyboardPoint">
            <summary>
            小数点"."键（小键盘）
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Validate.Annotations.CustomValidatorAttribute">
            <summary>
            自定义验证器
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Validate.Annotations.CustomValidatorAttribute.ValidatorKey">
            <summary>
            验证键
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Annotations.CustomValidatorAttribute.#ctor(System.String)">
            <summary>
            自定义验证器
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Annotations.CustomValidatorAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            是否有效
            </summary>
            <param name="value"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.Validate.Annotations.EnumRequiredAttribute">
            <summary>
            EnumRequired标签
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Annotations.EnumRequiredAttribute.IsValid(System.Object)">
            <summary>
            是否有效
            </summary>
            <param name="value">值</param>
            <returns>true有效，false无效</returns>
        </member>
        <member name="T:WitsWay.Utilities.Validate.Annotations.ICustomValidator">
            <summary>
            自定义验证器
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Validate.Annotations.ICustomValidator.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Annotations.ICustomValidator.Validate(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            验证
            </summary>
            <returns>验证结果</returns>
        </member>
        <member name="T:WitsWay.Utilities.Validate.Annotations.IValidateModel">
            <summary>
            验证模型标记接口
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Validate.Annotations.CustomValidatorFactory">
            <summary>
            自定义验证器工厂
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.Annotations.CustomValidatorFactory.ValidatorKeyTypeDic">
            <summary>
            自定义验证器 键->类型
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.Annotations.CustomValidatorFactory.CustomValidatorDllsConfigKey">
            <summary>
            AppConfig中自定义验证器Dll名称配置
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.Annotations.CustomValidatorFactory.Locker">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Annotations.CustomValidatorFactory.GetCustomValidator(System.String)">
            <summary>
            取得自定义验证器对象
            </summary>
            <param name="key">验证器键</param>
            <returns>自定义验证器接口实例</returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Annotations.CustomValidatorFactory.InitDlls">
            <summary>
            读取Dll中的自定义验证器
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Annotations.CustomValidatorFactory.InitDll(System.String)">
            <summary>
            读取Dll中的自定义验证器
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Validate.Annotations.ValidateExtends">
            <summary>
            验证扩展
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Annotations.ValidateExtends.ValidateValid``1(``0)">
            <summary>
            验证模型是否有效
            </summary>
            <typeparam name="T">验证模型类型</typeparam>
            <param name="model">验证模型</param>
            <returns>有效true，无效false</returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Annotations.ValidateExtends.GetValidateResults``1(``0)">
            <summary>
            获取验证结果列表
            </summary>
            <typeparam name="T">验证模型类型</typeparam>
            <param name="model">验证模型</param>
            <returns>验证结果列表</returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Annotations.ValidateExtends.ThrowValidateResult``1(``0)">
            <summary>
            抛出验证结果集中的 第一条验证不通过信息
            </summary>
            <typeparam name="T">验证模型类型</typeparam>
            <param name="model">验证模型</param>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Annotations.ValidateExtends.ThrowValidateResults``1(``0)">
            <summary>
            抛出验证结果集中的 所有验证不通过信息
            </summary>
            <typeparam name="T">验证模型类型</typeparam>
            <param name="model">验证模型</param>
        </member>
        <member name="T:WitsWay.Utilities.Validate.RegexStrings">
            <summary>
            正则字符串
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.RegexStrings.HtmlLabelRegex">
            <summary>
            匹配HTML标记的正则表达式
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.RegexStrings.PositiveIntegerRegex">
            <summary>
            正整数
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.RegexStrings.NegativeIntegerRegex">
            <summary>
            负整数
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.RegexStrings.IntegerRegex">
            <summary>
            整数
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.RegexStrings.PositiveFloatRegex">
            <summary>
            正浮点数
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.RegexStrings.NegativeFloatRegex">
            <summary>
            负浮点数
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.RegexStrings.FloatRegex">
            <summary>
            浮点数
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.RegexStrings.LetterRegex">
            <summary>
            26个英文字(不区分大小写)
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.RegexStrings.CapitalLetterRegex">
            <summary>
            26个大写英文字母
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.RegexStrings.LowercaseRegex">
            <summary>
            26个小写英文字母:
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.RegexStrings.NumberAndLetterRegex">
            <summary>
            数字和26个英文字母混合
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.RegexStrings.NumberLetterUnderlineRegex">
            <summary>
            数字和26个英文字母和下划线混合
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.RegexStrings.EmailRegex">
            <summary>
            Email地址正则表达式
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.RegexStrings.UrlRegex">
             <summary>
            Url正则表达式
             </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.RegexStrings.ChinaPhoneRegex">
            <summary>
            中国电话: 例如：021-8888888 或者0515-88888888 或者 021-88888888-8888
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.RegexStrings.ChinaPostCodeRegex">
             <summary>
            中国邮政编码 
             </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.RegexStrings.ChinaMobileRegex">
            <summary>
            中国手机
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.RegexStrings.ChinaPhoneAndMobileRegex">
            <summary>
            中国电话包括手机
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.RegexStrings.QQRegex">
            <summary>
            QQ号
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.RegexStrings.IPRegex">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.RegexStrings.IdentityNo">
            <summary>
            中国身份证号
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Validate.ValidationErrorCode">
            <summary>
            验证错误码
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.StringIsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.StringIsLength">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.StringIsLongerThan">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.StringIsShorterThan">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.StringMatchRegex">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.StringIsEmail">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.StringIsURL">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.StringIsDate">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.StringIsInteger">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.StringIsDecimal">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.IsLengthBetween">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.StringStartsWith">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.StringEndsWith">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.StringContains">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.StringIsLong">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.StringIsNullOrEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.StringIsNotNullOrEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.NumericIsLessThanOrEqual">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.NumericIsGreaterThanOrEqual">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.NumericIsGreaterThan">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.NumericIsLessThan">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.NumericEquals">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.NumericBetween">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.NumericIsZero">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.NumericNotInList">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.DateIsNotMinValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.DateIsNotMaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.DateIsEarlierThan">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.DateIsLaterThan">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.DateBetween">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.DateValidSqlServerDateTime">
            <summary>
            有效的SQL时间
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.BoolIsNotTrue">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.BoolIsNotFalse">
            <summary>
            
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.ValidationErrorCode.CustomErrorCode">
            <summary>
            
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Validate.ValidateResult">
            <summary>
            验证结果
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Validate.ValidateResult.#ctor(System.String,System.String,System.Boolean,System.Int64)">
            <summary>
            完全构造函数
            </summary>
            <param name="errorMessage">验证错误消息</param>
            <param name="fieldName">验证字段</param>
            <param name="result">验证结果</param>
            <param name="errorCode">失败错误码</param>
        </member>
        <member name="P:WitsWay.Utilities.Validate.ValidateResult.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Validate.ValidateResult.FieldName">
            <summary>
            验证字段
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Validate.ValidateResult.Pass">
            <summary>
            是否通过验证
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Validate.ValidateResult.ErrorCode">
            <summary>
            验证错误码(暂不使用)
            </summary>
        </member>
        <member name="T:WitsWay.Utilities.Validate.Validators.BoolValidator">
            <summary>
            bool验证器
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.BoolValidator.#ctor(System.String,System.Boolean,WitsWay.Utilities.Validate.Validators.Validator)">
            <summary>
            创建BoolValidator实例
            </summary>
            <param name="value"></param>
            <param name="fieldName"></param>
            <param name="validatorObj"></param>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.BoolValidator.IsTrue(System.String)">
            <summary>
            验证值是否为true
            </summary>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.BoolValidator.IsFalse(System.String)">
            <summary>
            验证值是否为false
            </summary>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.Validate.Validators.DateValidator">
            <summary>
            DateTime验证器
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.DateValidator.#ctor(System.String,System.DateTime,WitsWay.Utilities.Validate.Validators.Validator)">
            <summary>
            创建DateValidator实例
            </summary>
            <param name="value"></param>
            <param name="fieldName"></param>
            <param name="validatorObj"></param>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.DateValidator.IsMaxValue(System.String)">
            <summary>
            是日期最大值DateTime.MaxValue
            </summary>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.DateValidator.NotMaxValue(System.String)">
            <summary>
            不是日期最大值DateTime.MaxValue
            </summary>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.DateValidator.IsMinValue(System.String)">
            <summary>
            是日期最小值DateTime.MinValue
            </summary>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.DateValidator.NotMinValue(System.String)">
            <summary>
            不是日期最小值DateTime.MinValue
            </summary>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.DateValidator.IsEarlierThan(System.DateTime,System.String)">
            <summary>
            Value早于compareValue
            </summary>
            <param name="compareValue"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.DateValidator.IsEarlierThanOrEqual(System.DateTime,System.String)">
            <summary>
            Value早于或等于compareValue
            </summary>
            <param name="compareValue"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.DateValidator.IsLaterThan(System.DateTime,System.String)">
            <summary>
            Value晚于compareValue
            </summary>
            <param name="compareValue"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.DateValidator.IsLaterThanOrEqual(System.DateTime,System.String)">
            <summary>
            Value晚于或等于compareValue
            </summary>
            <param name="compareValue"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.DateValidator.IsBetween(System.DateTime,System.DateTime,System.String)">
            <summary>
            Value在value1和value2之间
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.DateValidator.IsValidSqlServerDateTime(System.String)">
            <summary>
            是否是有效的SQL时间
            </summary>
            <param name="errorMsg">错误信息</param>
            <returns>验证结果</returns>
        </member>
        <member name="T:WitsWay.Utilities.Validate.Validators.ValidatorMaxPrice">
            <summary>
            系统目前支持的最大额度
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.Validators.ValidatorMaxPrice.MaxPrice">
            <summary>
            最大额度
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.Validators.ValidatorMaxPrice.Fin_MaxPrice">
            <summary>
            账户维护支持的最大金额
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.ValidatorMaxPrice.ValidatorPrice(System.Decimal)">
            <summary>
            验证金额是否超过1000000000
            </summary>
            <param name="price">总金额</param>
        </member>
        <member name="T:WitsWay.Utilities.Validate.Validators.NumericValidator`1">
            <summary>
            Numeric验证器
            </summary>
            <typeparam name="TValue">
            </typeparam>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.NumericValidator`1.#ctor(System.String,`0,WitsWay.Utilities.Validate.Validators.Validator)">
            <summary>
            创建NumericValidator实例
            </summary>
            <param name="value"></param>
            <param name="fieldName"></param>
            <param name="validatorObj"></param>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.NumericValidator`1.IsLessThanOrEqual(`0,System.String)">
            <summary>
            小于等于
            </summary>
            <param name="lessThanValue"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.NumericValidator`1.IsGreaterThanOrEqual(`0,System.String)">
            <summary>
            大于等于
            </summary>
            <param name="greaterThanValue"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.NumericValidator`1.IsGreaterThan(`0,System.String)">
            <summary>
            大于
            </summary>
            <param name="greaterThanValue"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.NumericValidator`1.IsIn(System.Collections.Generic.List{`0},System.String)">
            <summary>
            值在给定散列值中
            </summary>
            <param name="inValues"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.NumericValidator`1.IsLessThan(`0,System.String)">
            <summary>
            小于
            </summary>
            <param name="lessThanValue"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.NumericValidator`1.Equals(`0,System.String)">
            <summary>
            等于equalValue
            </summary>
            <param name="equalValue"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.NumericValidator`1.Between(`0,`0,System.String)">
            <summary>
            大于等于minValue小于等于maxValue
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.NumericValidator`1.IsDefault(System.String)">
            <summary>
            等于默认值，Numeric一般都默认为0
            </summary>
            <param name="errorMsg"></param>
            <returns></returns>
        </member>
        <member name="T:WitsWay.Utilities.Validate.Validators.StringValidator">
            <summary>
            String验证器
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.StringValidator.#ctor(System.String,System.String,WitsWay.Utilities.Validate.Validators.Validator)">
            <summary>
            初始化验证器
            </summary>
            <param name="value">值</param>
            <param name="fieldName">字段名</param>
            <param name="validatorObj">验证对象</param>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.StringValidator.NotEmpty(System.String)">
            <summary>
            不为空
            </summary>
            <param name="errorMessage">错误消息</param>
            <returns>验证器</returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.StringValidator.IsEmpty(System.String)">
            <summary>
            为空
            </summary>
            <param name="errorMessage">错误消息</param>
            <returns>验证器</returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.StringValidator.IsLength(System.Int32,System.String)">
            <summary>
            长度为
            </summary>
            <param name="compareLength">比较值</param>
            <param name="errorMessage">错误消息</param>
            <returns>验证器</returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.StringValidator.NotLength(System.Int32,System.String)">
            <summary>
            长度不为
            </summary>
            <param name="compareLength">比较值</param>
            <param name="errorMessage">错误消息</param>
            <returns>验证器</returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.StringValidator.IsLongerThan(System.Int32,System.String)">
            <summary>
            长度大于minLength
            </summary>
            <param name="minLength">最小长度</param>
            <param name="errorMessage">错误消息</param>
            <returns>验证器</returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.StringValidator.IsShorterThan(System.Int32,System.String)">
            <summary>
            长度短于
            </summary>
            <param name="maxLength">最大长度</param>
            <param name="errorMessage">错误消息</param>
            <returns>验证器</returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.StringValidator.MatchRegex(System.String,System.String)">
            <summary>
            正则匹配
            </summary>
            <param name="regularExpression">正则表达式</param>
            <param name="errorMessage">错误消息</param>
            <returns>验证器</returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.StringValidator.MatchRegex(System.String,System.Text.RegularExpressions.RegexOptions,System.String)">
            <summary>
            正则匹配
            </summary>
            <param name="regularExpression">正则表达式</param>
            <param name="regexOptions">匹配选项</param>
            <param name="errorMessage">错误消息</param>
            <returns>验证器</returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.StringValidator.NotMatchRegex(System.String,System.String)">
            <summary>
            正则不匹配
            </summary>
            <param name="regularExpression">正则表达式</param>
            <param name="errorMessage">错误消息</param>
            <returns>验证器</returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.StringValidator.NotMatchRegex(System.String,System.Text.RegularExpressions.RegexOptions,System.String)">
            <summary>
            正则不匹配
            </summary>
            <param name="regularExpression">正则表达式</param>
            <param name="regexOptions">匹配选项</param>
            <param name="errorMessage">错误消息</param>
            <returns>验证器</returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.StringValidator.IsEmail(System.String)">
            <summary>
            检查是否是Email
            </summary>
            <param name="errorMessage">错误消息</param>
            <returns>验证器</returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.StringValidator.IsURL(System.String)">
            <summary>
            检查字符串是否是URL
            </summary>
            <param name="errorMsg">错误消息</param>
            <returns>验证器</returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.StringValidator.IsDate(System.String)">
            <summary>
            检查字符串是否是日期
            </summary>
            <param name="errorMsg">错误消息</param>
            <returns>验证器</returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.StringValidator.IsInteger(System.String)">
            <summary>
            检查字符串是否是整形
            </summary>
            <param name="errorMsg">错误消息</param>
            <returns>验证器</returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.StringValidator.IsLong(System.String)">
            <summary>
            检查字符串是否是Long
            </summary>
            <param name="errorMsg">错误消息</param>
            <returns>验证器</returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.StringValidator.IsDecimal(System.String)">
            <summary>
            检查字符串是否是Decimal
            </summary>
            <param name="errorMsg">错误消息</param>
            <returns>验证器</returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.StringValidator.IsLengthBetween(System.Int32,System.Int32,System.String)">
            <summary>
            检查字符串是否长度在minLength和maxLength之间
            </summary>
            <param name="minLength">最小长度</param>
            <param name="maxLength">最大长度</param>
            <param name="errorMsg">错误消息</param>
            <returns>验证器</returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.StringValidator.Contains(System.String,System.String)">
            <summary>
            检查字符串是否包含特定字符才
            </summary>
            <param name="containValue">包含的值</param>
            <param name="errorMsg">错误消息</param>
            <returns>验证器</returns>
        </member>
        <member name="T:WitsWay.Utilities.Validate.Validators.Validator">
            <summary>
            验证器
            </summary>
        </member>
        <member name="F:WitsWay.Utilities.Validate.Validators.Validator.validatorResults">
            <summary>
            验证错误信息集合
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Validate.Validators.Validator.ValidatorResults">
            <summary>
            验证结果集合
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Validate.Validators.Validator.ValidatorErrors">
            <summary>
            验证错误集合
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Validate.Validators.Validator.Pass">
            <summary>
            是否通过验证
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.Validator.Check(System.String,System.Int32)">
            <summary>
            验证int
            </summary>
            <param name="value"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.Validator.Check(System.String,System.UInt32)">
            <summary>
            验证uint
            </summary>
            <param name="value"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.Validator.Check(System.String,System.Int16)">
            <summary>
            验证short
            </summary>
            <param name="value"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.Validator.Check(System.String,System.UInt16)">
            <summary>
            验证ushort
            </summary>
            <param name="value"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.Validator.Check(System.String,System.Int64)">
            <summary>
            验证long
            </summary>
            <param name="value"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.Validator.Check(System.String,System.UInt64)">
            <summary>
            验证ulong
            </summary>
            <param name="value"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.Validator.Check(System.String,System.Byte)">
            <summary>
            验证byte
            </summary>
            <param name="value"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.Validator.Check(System.String,System.SByte)">
            <summary>
            验证sbyte
            </summary>
            <param name="value"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.Validator.Check(System.String,System.Decimal)">
            <summary>
            验证decimal
            </summary>
            <param name="value"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.Validator.Check(System.String,System.Single)">
            <summary>
            验证float
            </summary>
            <param name="value"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.Validator.Check(System.String,System.Double)">
            <summary>
            验证double
            </summary>
            <param name="value"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.Validator.Check(System.String,System.Boolean)">
            <summary>
            验证bool
            </summary>
            <param name="value"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.Validator.Check(System.String,System.String)">
            <summary>
            验证字符串
            </summary>
            <param name="value"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.Validator.Check(System.String,System.DateTime)">
            <summary>
            验证日期
            </summary>
            <param name="value"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.Validator.Clear">
            <summary>
            清空所有验证结果
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.Validator.AddValidationResult(System.String,System.Boolean,System.String,System.Int64)">
            <summary>
            添加一个验证结果
            </summary>
            <param name="errorMsg"></param>
            <param name="fieldName"></param>
            <param name="pass"></param>
            <param name="errorCode"></param>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.Validator.AddValidationResult(System.String,System.Boolean,System.String)">
            <summary>
            添加一个验证结果,ErrorCode默认为CustomErrorCode
            </summary>
            <param name="fieldName"></param>
            <param name="pass"></param>
            <param name="errorMsg">错误信息</param>
        </member>
        <member name="T:WitsWay.Utilities.Validate.Validators.ValidatorBase`2">
            <summary>
            验证器基类
            </summary>
            <typeparam name="TValidator">验证器</typeparam>
            <typeparam name="TValue">验证值类型</typeparam>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.ValidatorBase`2.#ctor(System.String,`1,WitsWay.Utilities.Validate.Validators.Validator)">
            <summary>
            构造函数
            </summary>
            <param name="value">值</param>
            <param name="fieldName">验证字段</param>
            <param name="validatorObj">验证器</param>
        </member>
        <member name="P:WitsWay.Utilities.Validate.Validators.ValidatorBase`2.Value">
            <summary>
            验证值
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Validate.Validators.ValidatorBase`2.FieldName">
            <summary>
            验证字段
            </summary>
        </member>
        <member name="P:WitsWay.Utilities.Validate.Validators.ValidatorBase`2.ValidatorObj">
            <summary>
            验证器
            </summary>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.ValidatorBase`2.SetResult(System.Boolean,System.String,System.Int64)">
            <summary>
            设置验证结果
            </summary>
            <param name="pass"></param>
            <param name="errorMsg"></param>
            <param name="errorCode"></param>
        </member>
        <member name="M:WitsWay.Utilities.Validate.Validators.ValidatorBase`2.Is(System.Predicate{`1},System.String)">
            <summary>
            自定义验证
            </summary>
            <param name="predicate">Predicate《TValue》委托，输入TValue类型，返回bool</param>
            <param name="errorMsg">验证错误消息</param>
            <returns></returns>
        </member>
    </members>
</doc>
